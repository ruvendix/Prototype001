// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Struct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Struct_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Struct_2eproto;
namespace Protocol {
class EntityInfo;
struct EntityInfoDefaultTypeInternal;
extern EntityInfoDefaultTypeInternal _EntityInfo_default_instance_;
class MonsterInfo;
struct MonsterInfoDefaultTypeInternal;
extern MonsterInfoDefaultTypeInternal _MonsterInfo_default_instance_;
class ProjectileInfo;
struct ProjectileInfoDefaultTypeInternal;
extern ProjectileInfoDefaultTypeInternal _ProjectileInfo_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::EntityInfo* Arena::CreateMaybeMessage<::Protocol::EntityInfo>(Arena*);
template<> ::Protocol::MonsterInfo* Arena::CreateMaybeMessage<::Protocol::MonsterInfo>(Arena*);
template<> ::Protocol::ProjectileInfo* Arena::CreateMaybeMessage<::Protocol::ProjectileInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class EntityInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.EntityInfo) */ {
 public:
  inline EntityInfo() : EntityInfo(nullptr) {}
  ~EntityInfo() override;
  explicit PROTOBUF_CONSTEXPR EntityInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EntityInfo(const EntityInfo& from);
  EntityInfo(EntityInfo&& from) noexcept
    : EntityInfo() {
    *this = ::std::move(from);
  }

  inline EntityInfo& operator=(const EntityInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntityInfo& operator=(EntityInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EntityInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const EntityInfo* internal_default_instance() {
    return reinterpret_cast<const EntityInfo*>(
               &_EntityInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EntityInfo& a, EntityInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EntityInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntityInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EntityInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EntityInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EntityInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EntityInfo& from) {
    EntityInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntityInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.EntityInfo";
  }
  protected:
  explicit EntityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIdFieldNumber = 1,
    kCellPosXFieldNumber = 2,
    kCellPosYFieldNumber = 3,
    kMaxHpFieldNumber = 4,
    kHpFieldNumber = 5,
    kAttackFieldNumber = 6,
    kDefenseFieldNumber = 7,
    kEntityTypeFieldNumber = 8,
    kEntityLookAtDirFieldNumber = 9,
    kEntityStateFieldNumber = 10,
  };
  // uint64 entity_id = 1;
  void clear_entity_id();
  uint64_t entity_id() const;
  void set_entity_id(uint64_t value);
  private:
  uint64_t _internal_entity_id() const;
  void _internal_set_entity_id(uint64_t value);
  public:

  // uint32 cell_pos_x = 2;
  void clear_cell_pos_x();
  uint32_t cell_pos_x() const;
  void set_cell_pos_x(uint32_t value);
  private:
  uint32_t _internal_cell_pos_x() const;
  void _internal_set_cell_pos_x(uint32_t value);
  public:

  // uint32 cell_pos_y = 3;
  void clear_cell_pos_y();
  uint32_t cell_pos_y() const;
  void set_cell_pos_y(uint32_t value);
  private:
  uint32_t _internal_cell_pos_y() const;
  void _internal_set_cell_pos_y(uint32_t value);
  public:

  // int32 max_hp = 4;
  void clear_max_hp();
  int32_t max_hp() const;
  void set_max_hp(int32_t value);
  private:
  int32_t _internal_max_hp() const;
  void _internal_set_max_hp(int32_t value);
  public:

  // int32 hp = 5;
  void clear_hp();
  int32_t hp() const;
  void set_hp(int32_t value);
  private:
  int32_t _internal_hp() const;
  void _internal_set_hp(int32_t value);
  public:

  // uint32 attack = 6;
  void clear_attack();
  uint32_t attack() const;
  void set_attack(uint32_t value);
  private:
  uint32_t _internal_attack() const;
  void _internal_set_attack(uint32_t value);
  public:

  // uint32 defense = 7;
  void clear_defense();
  uint32_t defense() const;
  void set_defense(uint32_t value);
  private:
  uint32_t _internal_defense() const;
  void _internal_set_defense(uint32_t value);
  public:

  // .Protocol.EEntityType entity_type = 8;
  void clear_entity_type();
  ::Protocol::EEntityType entity_type() const;
  void set_entity_type(::Protocol::EEntityType value);
  private:
  ::Protocol::EEntityType _internal_entity_type() const;
  void _internal_set_entity_type(::Protocol::EEntityType value);
  public:

  // .Protocol.EEntityLookAtDirection entity_look_at_dir = 9;
  void clear_entity_look_at_dir();
  ::Protocol::EEntityLookAtDirection entity_look_at_dir() const;
  void set_entity_look_at_dir(::Protocol::EEntityLookAtDirection value);
  private:
  ::Protocol::EEntityLookAtDirection _internal_entity_look_at_dir() const;
  void _internal_set_entity_look_at_dir(::Protocol::EEntityLookAtDirection value);
  public:

  // .Protocol.EEntityState entity_state = 10;
  void clear_entity_state();
  ::Protocol::EEntityState entity_state() const;
  void set_entity_state(::Protocol::EEntityState value);
  private:
  ::Protocol::EEntityState _internal_entity_state() const;
  void _internal_set_entity_state(::Protocol::EEntityState value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.EntityInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t entity_id_;
    uint32_t cell_pos_x_;
    uint32_t cell_pos_y_;
    int32_t max_hp_;
    int32_t hp_;
    uint32_t attack_;
    uint32_t defense_;
    int entity_type_;
    int entity_look_at_dir_;
    int entity_state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class MonsterInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.MonsterInfo) */ {
 public:
  inline MonsterInfo() : MonsterInfo(nullptr) {}
  ~MonsterInfo() override;
  explicit PROTOBUF_CONSTEXPR MonsterInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MonsterInfo(const MonsterInfo& from);
  MonsterInfo(MonsterInfo&& from) noexcept
    : MonsterInfo() {
    *this = ::std::move(from);
  }

  inline MonsterInfo& operator=(const MonsterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MonsterInfo& operator=(MonsterInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MonsterInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MonsterInfo* internal_default_instance() {
    return reinterpret_cast<const MonsterInfo*>(
               &_MonsterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MonsterInfo& a, MonsterInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MonsterInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MonsterInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MonsterInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MonsterInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MonsterInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MonsterInfo& from) {
    MonsterInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonsterInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.MonsterInfo";
  }
  protected:
  explicit MonsterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonsterInfoFieldNumber = 2,
    kMonsterIdFieldNumber = 1,
  };
  // .Protocol.EntityInfo monster_info = 2;
  bool has_monster_info() const;
  private:
  bool _internal_has_monster_info() const;
  public:
  void clear_monster_info();
  const ::Protocol::EntityInfo& monster_info() const;
  PROTOBUF_NODISCARD ::Protocol::EntityInfo* release_monster_info();
  ::Protocol::EntityInfo* mutable_monster_info();
  void set_allocated_monster_info(::Protocol::EntityInfo* monster_info);
  private:
  const ::Protocol::EntityInfo& _internal_monster_info() const;
  ::Protocol::EntityInfo* _internal_mutable_monster_info();
  public:
  void unsafe_arena_set_allocated_monster_info(
      ::Protocol::EntityInfo* monster_info);
  ::Protocol::EntityInfo* unsafe_arena_release_monster_info();

  // uint32 monster_id = 1;
  void clear_monster_id();
  uint32_t monster_id() const;
  void set_monster_id(uint32_t value);
  private:
  uint32_t _internal_monster_id() const;
  void _internal_set_monster_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.MonsterInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::EntityInfo* monster_info_;
    uint32_t monster_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class ProjectileInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ProjectileInfo) */ {
 public:
  inline ProjectileInfo() : ProjectileInfo(nullptr) {}
  ~ProjectileInfo() override;
  explicit PROTOBUF_CONSTEXPR ProjectileInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProjectileInfo(const ProjectileInfo& from);
  ProjectileInfo(ProjectileInfo&& from) noexcept
    : ProjectileInfo() {
    *this = ::std::move(from);
  }

  inline ProjectileInfo& operator=(const ProjectileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProjectileInfo& operator=(ProjectileInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProjectileInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProjectileInfo* internal_default_instance() {
    return reinterpret_cast<const ProjectileInfo*>(
               &_ProjectileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProjectileInfo& a, ProjectileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ProjectileInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProjectileInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProjectileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProjectileInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProjectileInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProjectileInfo& from) {
    ProjectileInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProjectileInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ProjectileInfo";
  }
  protected:
  explicit ProjectileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityInfoFieldNumber = 2,
    kProjectileIdFieldNumber = 1,
  };
  // .Protocol.EntityInfo entity_info = 2;
  bool has_entity_info() const;
  private:
  bool _internal_has_entity_info() const;
  public:
  void clear_entity_info();
  const ::Protocol::EntityInfo& entity_info() const;
  PROTOBUF_NODISCARD ::Protocol::EntityInfo* release_entity_info();
  ::Protocol::EntityInfo* mutable_entity_info();
  void set_allocated_entity_info(::Protocol::EntityInfo* entity_info);
  private:
  const ::Protocol::EntityInfo& _internal_entity_info() const;
  ::Protocol::EntityInfo* _internal_mutable_entity_info();
  public:
  void unsafe_arena_set_allocated_entity_info(
      ::Protocol::EntityInfo* entity_info);
  ::Protocol::EntityInfo* unsafe_arena_release_entity_info();

  // uint32 projectile_id = 1;
  void clear_projectile_id();
  uint32_t projectile_id() const;
  void set_projectile_id(uint32_t value);
  private:
  uint32_t _internal_projectile_id() const;
  void _internal_set_projectile_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ProjectileInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::EntityInfo* entity_info_;
    uint32_t projectile_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EntityInfo

// uint64 entity_id = 1;
inline void EntityInfo::clear_entity_id() {
  _impl_.entity_id_ = uint64_t{0u};
}
inline uint64_t EntityInfo::_internal_entity_id() const {
  return _impl_.entity_id_;
}
inline uint64_t EntityInfo::entity_id() const {
  // @@protoc_insertion_point(field_get:Protocol.EntityInfo.entity_id)
  return _internal_entity_id();
}
inline void EntityInfo::_internal_set_entity_id(uint64_t value) {
  
  _impl_.entity_id_ = value;
}
inline void EntityInfo::set_entity_id(uint64_t value) {
  _internal_set_entity_id(value);
  // @@protoc_insertion_point(field_set:Protocol.EntityInfo.entity_id)
}

// uint32 cell_pos_x = 2;
inline void EntityInfo::clear_cell_pos_x() {
  _impl_.cell_pos_x_ = 0u;
}
inline uint32_t EntityInfo::_internal_cell_pos_x() const {
  return _impl_.cell_pos_x_;
}
inline uint32_t EntityInfo::cell_pos_x() const {
  // @@protoc_insertion_point(field_get:Protocol.EntityInfo.cell_pos_x)
  return _internal_cell_pos_x();
}
inline void EntityInfo::_internal_set_cell_pos_x(uint32_t value) {
  
  _impl_.cell_pos_x_ = value;
}
inline void EntityInfo::set_cell_pos_x(uint32_t value) {
  _internal_set_cell_pos_x(value);
  // @@protoc_insertion_point(field_set:Protocol.EntityInfo.cell_pos_x)
}

// uint32 cell_pos_y = 3;
inline void EntityInfo::clear_cell_pos_y() {
  _impl_.cell_pos_y_ = 0u;
}
inline uint32_t EntityInfo::_internal_cell_pos_y() const {
  return _impl_.cell_pos_y_;
}
inline uint32_t EntityInfo::cell_pos_y() const {
  // @@protoc_insertion_point(field_get:Protocol.EntityInfo.cell_pos_y)
  return _internal_cell_pos_y();
}
inline void EntityInfo::_internal_set_cell_pos_y(uint32_t value) {
  
  _impl_.cell_pos_y_ = value;
}
inline void EntityInfo::set_cell_pos_y(uint32_t value) {
  _internal_set_cell_pos_y(value);
  // @@protoc_insertion_point(field_set:Protocol.EntityInfo.cell_pos_y)
}

// int32 max_hp = 4;
inline void EntityInfo::clear_max_hp() {
  _impl_.max_hp_ = 0;
}
inline int32_t EntityInfo::_internal_max_hp() const {
  return _impl_.max_hp_;
}
inline int32_t EntityInfo::max_hp() const {
  // @@protoc_insertion_point(field_get:Protocol.EntityInfo.max_hp)
  return _internal_max_hp();
}
inline void EntityInfo::_internal_set_max_hp(int32_t value) {
  
  _impl_.max_hp_ = value;
}
inline void EntityInfo::set_max_hp(int32_t value) {
  _internal_set_max_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.EntityInfo.max_hp)
}

// int32 hp = 5;
inline void EntityInfo::clear_hp() {
  _impl_.hp_ = 0;
}
inline int32_t EntityInfo::_internal_hp() const {
  return _impl_.hp_;
}
inline int32_t EntityInfo::hp() const {
  // @@protoc_insertion_point(field_get:Protocol.EntityInfo.hp)
  return _internal_hp();
}
inline void EntityInfo::_internal_set_hp(int32_t value) {
  
  _impl_.hp_ = value;
}
inline void EntityInfo::set_hp(int32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.EntityInfo.hp)
}

// uint32 attack = 6;
inline void EntityInfo::clear_attack() {
  _impl_.attack_ = 0u;
}
inline uint32_t EntityInfo::_internal_attack() const {
  return _impl_.attack_;
}
inline uint32_t EntityInfo::attack() const {
  // @@protoc_insertion_point(field_get:Protocol.EntityInfo.attack)
  return _internal_attack();
}
inline void EntityInfo::_internal_set_attack(uint32_t value) {
  
  _impl_.attack_ = value;
}
inline void EntityInfo::set_attack(uint32_t value) {
  _internal_set_attack(value);
  // @@protoc_insertion_point(field_set:Protocol.EntityInfo.attack)
}

// uint32 defense = 7;
inline void EntityInfo::clear_defense() {
  _impl_.defense_ = 0u;
}
inline uint32_t EntityInfo::_internal_defense() const {
  return _impl_.defense_;
}
inline uint32_t EntityInfo::defense() const {
  // @@protoc_insertion_point(field_get:Protocol.EntityInfo.defense)
  return _internal_defense();
}
inline void EntityInfo::_internal_set_defense(uint32_t value) {
  
  _impl_.defense_ = value;
}
inline void EntityInfo::set_defense(uint32_t value) {
  _internal_set_defense(value);
  // @@protoc_insertion_point(field_set:Protocol.EntityInfo.defense)
}

// .Protocol.EEntityType entity_type = 8;
inline void EntityInfo::clear_entity_type() {
  _impl_.entity_type_ = 0;
}
inline ::Protocol::EEntityType EntityInfo::_internal_entity_type() const {
  return static_cast< ::Protocol::EEntityType >(_impl_.entity_type_);
}
inline ::Protocol::EEntityType EntityInfo::entity_type() const {
  // @@protoc_insertion_point(field_get:Protocol.EntityInfo.entity_type)
  return _internal_entity_type();
}
inline void EntityInfo::_internal_set_entity_type(::Protocol::EEntityType value) {
  
  _impl_.entity_type_ = value;
}
inline void EntityInfo::set_entity_type(::Protocol::EEntityType value) {
  _internal_set_entity_type(value);
  // @@protoc_insertion_point(field_set:Protocol.EntityInfo.entity_type)
}

// .Protocol.EEntityLookAtDirection entity_look_at_dir = 9;
inline void EntityInfo::clear_entity_look_at_dir() {
  _impl_.entity_look_at_dir_ = 0;
}
inline ::Protocol::EEntityLookAtDirection EntityInfo::_internal_entity_look_at_dir() const {
  return static_cast< ::Protocol::EEntityLookAtDirection >(_impl_.entity_look_at_dir_);
}
inline ::Protocol::EEntityLookAtDirection EntityInfo::entity_look_at_dir() const {
  // @@protoc_insertion_point(field_get:Protocol.EntityInfo.entity_look_at_dir)
  return _internal_entity_look_at_dir();
}
inline void EntityInfo::_internal_set_entity_look_at_dir(::Protocol::EEntityLookAtDirection value) {
  
  _impl_.entity_look_at_dir_ = value;
}
inline void EntityInfo::set_entity_look_at_dir(::Protocol::EEntityLookAtDirection value) {
  _internal_set_entity_look_at_dir(value);
  // @@protoc_insertion_point(field_set:Protocol.EntityInfo.entity_look_at_dir)
}

// .Protocol.EEntityState entity_state = 10;
inline void EntityInfo::clear_entity_state() {
  _impl_.entity_state_ = 0;
}
inline ::Protocol::EEntityState EntityInfo::_internal_entity_state() const {
  return static_cast< ::Protocol::EEntityState >(_impl_.entity_state_);
}
inline ::Protocol::EEntityState EntityInfo::entity_state() const {
  // @@protoc_insertion_point(field_get:Protocol.EntityInfo.entity_state)
  return _internal_entity_state();
}
inline void EntityInfo::_internal_set_entity_state(::Protocol::EEntityState value) {
  
  _impl_.entity_state_ = value;
}
inline void EntityInfo::set_entity_state(::Protocol::EEntityState value) {
  _internal_set_entity_state(value);
  // @@protoc_insertion_point(field_set:Protocol.EntityInfo.entity_state)
}

// -------------------------------------------------------------------

// MonsterInfo

// uint32 monster_id = 1;
inline void MonsterInfo::clear_monster_id() {
  _impl_.monster_id_ = 0u;
}
inline uint32_t MonsterInfo::_internal_monster_id() const {
  return _impl_.monster_id_;
}
inline uint32_t MonsterInfo::monster_id() const {
  // @@protoc_insertion_point(field_get:Protocol.MonsterInfo.monster_id)
  return _internal_monster_id();
}
inline void MonsterInfo::_internal_set_monster_id(uint32_t value) {
  
  _impl_.monster_id_ = value;
}
inline void MonsterInfo::set_monster_id(uint32_t value) {
  _internal_set_monster_id(value);
  // @@protoc_insertion_point(field_set:Protocol.MonsterInfo.monster_id)
}

// .Protocol.EntityInfo monster_info = 2;
inline bool MonsterInfo::_internal_has_monster_info() const {
  return this != internal_default_instance() && _impl_.monster_info_ != nullptr;
}
inline bool MonsterInfo::has_monster_info() const {
  return _internal_has_monster_info();
}
inline void MonsterInfo::clear_monster_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.monster_info_ != nullptr) {
    delete _impl_.monster_info_;
  }
  _impl_.monster_info_ = nullptr;
}
inline const ::Protocol::EntityInfo& MonsterInfo::_internal_monster_info() const {
  const ::Protocol::EntityInfo* p = _impl_.monster_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::EntityInfo&>(
      ::Protocol::_EntityInfo_default_instance_);
}
inline const ::Protocol::EntityInfo& MonsterInfo::monster_info() const {
  // @@protoc_insertion_point(field_get:Protocol.MonsterInfo.monster_info)
  return _internal_monster_info();
}
inline void MonsterInfo::unsafe_arena_set_allocated_monster_info(
    ::Protocol::EntityInfo* monster_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.monster_info_);
  }
  _impl_.monster_info_ = monster_info;
  if (monster_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.MonsterInfo.monster_info)
}
inline ::Protocol::EntityInfo* MonsterInfo::release_monster_info() {
  
  ::Protocol::EntityInfo* temp = _impl_.monster_info_;
  _impl_.monster_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::EntityInfo* MonsterInfo::unsafe_arena_release_monster_info() {
  // @@protoc_insertion_point(field_release:Protocol.MonsterInfo.monster_info)
  
  ::Protocol::EntityInfo* temp = _impl_.monster_info_;
  _impl_.monster_info_ = nullptr;
  return temp;
}
inline ::Protocol::EntityInfo* MonsterInfo::_internal_mutable_monster_info() {
  
  if (_impl_.monster_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::EntityInfo>(GetArenaForAllocation());
    _impl_.monster_info_ = p;
  }
  return _impl_.monster_info_;
}
inline ::Protocol::EntityInfo* MonsterInfo::mutable_monster_info() {
  ::Protocol::EntityInfo* _msg = _internal_mutable_monster_info();
  // @@protoc_insertion_point(field_mutable:Protocol.MonsterInfo.monster_info)
  return _msg;
}
inline void MonsterInfo::set_allocated_monster_info(::Protocol::EntityInfo* monster_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.monster_info_;
  }
  if (monster_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(monster_info);
    if (message_arena != submessage_arena) {
      monster_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, monster_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.monster_info_ = monster_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.MonsterInfo.monster_info)
}

// -------------------------------------------------------------------

// ProjectileInfo

// uint32 projectile_id = 1;
inline void ProjectileInfo::clear_projectile_id() {
  _impl_.projectile_id_ = 0u;
}
inline uint32_t ProjectileInfo::_internal_projectile_id() const {
  return _impl_.projectile_id_;
}
inline uint32_t ProjectileInfo::projectile_id() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileInfo.projectile_id)
  return _internal_projectile_id();
}
inline void ProjectileInfo::_internal_set_projectile_id(uint32_t value) {
  
  _impl_.projectile_id_ = value;
}
inline void ProjectileInfo::set_projectile_id(uint32_t value) {
  _internal_set_projectile_id(value);
  // @@protoc_insertion_point(field_set:Protocol.ProjectileInfo.projectile_id)
}

// .Protocol.EntityInfo entity_info = 2;
inline bool ProjectileInfo::_internal_has_entity_info() const {
  return this != internal_default_instance() && _impl_.entity_info_ != nullptr;
}
inline bool ProjectileInfo::has_entity_info() const {
  return _internal_has_entity_info();
}
inline void ProjectileInfo::clear_entity_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.entity_info_ != nullptr) {
    delete _impl_.entity_info_;
  }
  _impl_.entity_info_ = nullptr;
}
inline const ::Protocol::EntityInfo& ProjectileInfo::_internal_entity_info() const {
  const ::Protocol::EntityInfo* p = _impl_.entity_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::EntityInfo&>(
      ::Protocol::_EntityInfo_default_instance_);
}
inline const ::Protocol::EntityInfo& ProjectileInfo::entity_info() const {
  // @@protoc_insertion_point(field_get:Protocol.ProjectileInfo.entity_info)
  return _internal_entity_info();
}
inline void ProjectileInfo::unsafe_arena_set_allocated_entity_info(
    ::Protocol::EntityInfo* entity_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.entity_info_);
  }
  _impl_.entity_info_ = entity_info;
  if (entity_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.ProjectileInfo.entity_info)
}
inline ::Protocol::EntityInfo* ProjectileInfo::release_entity_info() {
  
  ::Protocol::EntityInfo* temp = _impl_.entity_info_;
  _impl_.entity_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::EntityInfo* ProjectileInfo::unsafe_arena_release_entity_info() {
  // @@protoc_insertion_point(field_release:Protocol.ProjectileInfo.entity_info)
  
  ::Protocol::EntityInfo* temp = _impl_.entity_info_;
  _impl_.entity_info_ = nullptr;
  return temp;
}
inline ::Protocol::EntityInfo* ProjectileInfo::_internal_mutable_entity_info() {
  
  if (_impl_.entity_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::EntityInfo>(GetArenaForAllocation());
    _impl_.entity_info_ = p;
  }
  return _impl_.entity_info_;
}
inline ::Protocol::EntityInfo* ProjectileInfo::mutable_entity_info() {
  ::Protocol::EntityInfo* _msg = _internal_mutable_entity_info();
  // @@protoc_insertion_point(field_mutable:Protocol.ProjectileInfo.entity_info)
  return _msg;
}
inline void ProjectileInfo::set_allocated_entity_info(::Protocol::EntityInfo* entity_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.entity_info_;
  }
  if (entity_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(entity_info);
    if (message_arena != submessage_arena) {
      entity_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.entity_info_ = entity_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.ProjectileInfo.entity_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
