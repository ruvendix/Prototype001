// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Packet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Packet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
#include "Struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Packet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Packet_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Packet_2eproto;
namespace Protocol {
class C_AttckToEntityPacket;
struct C_AttckToEntityPacketDefaultTypeInternal;
extern C_AttckToEntityPacketDefaultTypeInternal _C_AttckToEntityPacket_default_instance_;
class C_ModifyEntityLookAtDirectionPacket;
struct C_ModifyEntityLookAtDirectionPacketDefaultTypeInternal;
extern C_ModifyEntityLookAtDirectionPacketDefaultTypeInternal _C_ModifyEntityLookAtDirectionPacket_default_instance_;
class C_ModifyEntityStatePacket;
struct C_ModifyEntityStatePacketDefaultTypeInternal;
extern C_ModifyEntityStatePacketDefaultTypeInternal _C_ModifyEntityStatePacket_default_instance_;
class C_MoveEntityPacket;
struct C_MoveEntityPacketDefaultTypeInternal;
extern C_MoveEntityPacketDefaultTypeInternal _C_MoveEntityPacket_default_instance_;
class S_CreateMainPlayerPacket;
struct S_CreateMainPlayerPacketDefaultTypeInternal;
extern S_CreateMainPlayerPacketDefaultTypeInternal _S_CreateMainPlayerPacket_default_instance_;
class S_DiePlayerPacket;
struct S_DiePlayerPacketDefaultTypeInternal;
extern S_DiePlayerPacketDefaultTypeInternal _S_DiePlayerPacket_default_instance_;
class S_EnterGamePacket;
struct S_EnterGamePacketDefaultTypeInternal;
extern S_EnterGamePacketDefaultTypeInternal _S_EnterGamePacket_default_instance_;
class S_HitDamageToEntityPacket;
struct S_HitDamageToEntityPacketDefaultTypeInternal;
extern S_HitDamageToEntityPacketDefaultTypeInternal _S_HitDamageToEntityPacket_default_instance_;
class S_LeaveGamePacket;
struct S_LeaveGamePacketDefaultTypeInternal;
extern S_LeaveGamePacketDefaultTypeInternal _S_LeaveGamePacket_default_instance_;
class S_ModifyEntityLookAtDirectionPacket;
struct S_ModifyEntityLookAtDirectionPacketDefaultTypeInternal;
extern S_ModifyEntityLookAtDirectionPacketDefaultTypeInternal _S_ModifyEntityLookAtDirectionPacket_default_instance_;
class S_ModifyEntityStatePacket;
struct S_ModifyEntityStatePacketDefaultTypeInternal;
extern S_ModifyEntityStatePacketDefaultTypeInternal _S_ModifyEntityStatePacket_default_instance_;
class S_ModifyPlayerInformationPacket;
struct S_ModifyPlayerInformationPacketDefaultTypeInternal;
extern S_ModifyPlayerInformationPacketDefaultTypeInternal _S_ModifyPlayerInformationPacket_default_instance_;
class S_MoveEntityPacket;
struct S_MoveEntityPacketDefaultTypeInternal;
extern S_MoveEntityPacketDefaultTypeInternal _S_MoveEntityPacket_default_instance_;
class S_SyncEntitiesPacket;
struct S_SyncEntitiesPacketDefaultTypeInternal;
extern S_SyncEntitiesPacketDefaultTypeInternal _S_SyncEntitiesPacket_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C_AttckToEntityPacket* Arena::CreateMaybeMessage<::Protocol::C_AttckToEntityPacket>(Arena*);
template<> ::Protocol::C_ModifyEntityLookAtDirectionPacket* Arena::CreateMaybeMessage<::Protocol::C_ModifyEntityLookAtDirectionPacket>(Arena*);
template<> ::Protocol::C_ModifyEntityStatePacket* Arena::CreateMaybeMessage<::Protocol::C_ModifyEntityStatePacket>(Arena*);
template<> ::Protocol::C_MoveEntityPacket* Arena::CreateMaybeMessage<::Protocol::C_MoveEntityPacket>(Arena*);
template<> ::Protocol::S_CreateMainPlayerPacket* Arena::CreateMaybeMessage<::Protocol::S_CreateMainPlayerPacket>(Arena*);
template<> ::Protocol::S_DiePlayerPacket* Arena::CreateMaybeMessage<::Protocol::S_DiePlayerPacket>(Arena*);
template<> ::Protocol::S_EnterGamePacket* Arena::CreateMaybeMessage<::Protocol::S_EnterGamePacket>(Arena*);
template<> ::Protocol::S_HitDamageToEntityPacket* Arena::CreateMaybeMessage<::Protocol::S_HitDamageToEntityPacket>(Arena*);
template<> ::Protocol::S_LeaveGamePacket* Arena::CreateMaybeMessage<::Protocol::S_LeaveGamePacket>(Arena*);
template<> ::Protocol::S_ModifyEntityLookAtDirectionPacket* Arena::CreateMaybeMessage<::Protocol::S_ModifyEntityLookAtDirectionPacket>(Arena*);
template<> ::Protocol::S_ModifyEntityStatePacket* Arena::CreateMaybeMessage<::Protocol::S_ModifyEntityStatePacket>(Arena*);
template<> ::Protocol::S_ModifyPlayerInformationPacket* Arena::CreateMaybeMessage<::Protocol::S_ModifyPlayerInformationPacket>(Arena*);
template<> ::Protocol::S_MoveEntityPacket* Arena::CreateMaybeMessage<::Protocol::S_MoveEntityPacket>(Arena*);
template<> ::Protocol::S_SyncEntitiesPacket* Arena::CreateMaybeMessage<::Protocol::S_SyncEntitiesPacket>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class S_EnterGamePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_EnterGamePacket) */ {
 public:
  inline S_EnterGamePacket() : S_EnterGamePacket(nullptr) {}
  ~S_EnterGamePacket() override;
  explicit PROTOBUF_CONSTEXPR S_EnterGamePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_EnterGamePacket(const S_EnterGamePacket& from);
  S_EnterGamePacket(S_EnterGamePacket&& from) noexcept
    : S_EnterGamePacket() {
    *this = ::std::move(from);
  }

  inline S_EnterGamePacket& operator=(const S_EnterGamePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_EnterGamePacket& operator=(S_EnterGamePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_EnterGamePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_EnterGamePacket* internal_default_instance() {
    return reinterpret_cast<const S_EnterGamePacket*>(
               &_S_EnterGamePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(S_EnterGamePacket& a, S_EnterGamePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(S_EnterGamePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_EnterGamePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_EnterGamePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_EnterGamePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_EnterGamePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_EnterGamePacket& from) {
    S_EnterGamePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_EnterGamePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_EnterGamePacket";
  }
  protected:
  explicit S_EnterGamePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kEnterSuccessFieldNumber = 1,
  };
  // uint64 user_id = 2;
  void clear_user_id();
  uint64_t user_id() const;
  void set_user_id(uint64_t value);
  private:
  uint64_t _internal_user_id() const;
  void _internal_set_user_id(uint64_t value);
  public:

  // bool enter_success = 1;
  void clear_enter_success();
  bool enter_success() const;
  void set_enter_success(bool value);
  private:
  bool _internal_enter_success() const;
  void _internal_set_enter_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_EnterGamePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t user_id_;
    bool enter_success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class S_LeaveGamePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_LeaveGamePacket) */ {
 public:
  inline S_LeaveGamePacket() : S_LeaveGamePacket(nullptr) {}
  ~S_LeaveGamePacket() override;
  explicit PROTOBUF_CONSTEXPR S_LeaveGamePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LeaveGamePacket(const S_LeaveGamePacket& from);
  S_LeaveGamePacket(S_LeaveGamePacket&& from) noexcept
    : S_LeaveGamePacket() {
    *this = ::std::move(from);
  }

  inline S_LeaveGamePacket& operator=(const S_LeaveGamePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LeaveGamePacket& operator=(S_LeaveGamePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LeaveGamePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LeaveGamePacket* internal_default_instance() {
    return reinterpret_cast<const S_LeaveGamePacket*>(
               &_S_LeaveGamePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_LeaveGamePacket& a, S_LeaveGamePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LeaveGamePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LeaveGamePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_LeaveGamePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_LeaveGamePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_LeaveGamePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_LeaveGamePacket& from) {
    S_LeaveGamePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_LeaveGamePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_LeaveGamePacket";
  }
  protected:
  explicit S_LeaveGamePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerInfoFieldNumber = 3,
    kUserIdFieldNumber = 2,
    kLeaveSuccessFieldNumber = 1,
  };
  // .Protocol.NetworkEntityInfo player_info = 3;
  bool has_player_info() const;
  private:
  bool _internal_has_player_info() const;
  public:
  void clear_player_info();
  const ::Protocol::NetworkEntityInfo& player_info() const;
  PROTOBUF_NODISCARD ::Protocol::NetworkEntityInfo* release_player_info();
  ::Protocol::NetworkEntityInfo* mutable_player_info();
  void set_allocated_player_info(::Protocol::NetworkEntityInfo* player_info);
  private:
  const ::Protocol::NetworkEntityInfo& _internal_player_info() const;
  ::Protocol::NetworkEntityInfo* _internal_mutable_player_info();
  public:
  void unsafe_arena_set_allocated_player_info(
      ::Protocol::NetworkEntityInfo* player_info);
  ::Protocol::NetworkEntityInfo* unsafe_arena_release_player_info();

  // uint64 user_id = 2;
  void clear_user_id();
  uint64_t user_id() const;
  void set_user_id(uint64_t value);
  private:
  uint64_t _internal_user_id() const;
  void _internal_set_user_id(uint64_t value);
  public:

  // bool leave_success = 1;
  void clear_leave_success();
  bool leave_success() const;
  void set_leave_success(bool value);
  private:
  bool _internal_leave_success() const;
  void _internal_set_leave_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_LeaveGamePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::NetworkEntityInfo* player_info_;
    uint64_t user_id_;
    bool leave_success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class S_CreateMainPlayerPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CreateMainPlayerPacket) */ {
 public:
  inline S_CreateMainPlayerPacket() : S_CreateMainPlayerPacket(nullptr) {}
  ~S_CreateMainPlayerPacket() override;
  explicit PROTOBUF_CONSTEXPR S_CreateMainPlayerPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CreateMainPlayerPacket(const S_CreateMainPlayerPacket& from);
  S_CreateMainPlayerPacket(S_CreateMainPlayerPacket&& from) noexcept
    : S_CreateMainPlayerPacket() {
    *this = ::std::move(from);
  }

  inline S_CreateMainPlayerPacket& operator=(const S_CreateMainPlayerPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CreateMainPlayerPacket& operator=(S_CreateMainPlayerPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CreateMainPlayerPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CreateMainPlayerPacket* internal_default_instance() {
    return reinterpret_cast<const S_CreateMainPlayerPacket*>(
               &_S_CreateMainPlayerPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(S_CreateMainPlayerPacket& a, S_CreateMainPlayerPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CreateMainPlayerPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CreateMainPlayerPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_CreateMainPlayerPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_CreateMainPlayerPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_CreateMainPlayerPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_CreateMainPlayerPacket& from) {
    S_CreateMainPlayerPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CreateMainPlayerPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CreateMainPlayerPacket";
  }
  protected:
  explicit S_CreateMainPlayerPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainPlayerInfoFieldNumber = 1,
  };
  // .Protocol.NetworkEntityInfo main_player_info = 1;
  bool has_main_player_info() const;
  private:
  bool _internal_has_main_player_info() const;
  public:
  void clear_main_player_info();
  const ::Protocol::NetworkEntityInfo& main_player_info() const;
  PROTOBUF_NODISCARD ::Protocol::NetworkEntityInfo* release_main_player_info();
  ::Protocol::NetworkEntityInfo* mutable_main_player_info();
  void set_allocated_main_player_info(::Protocol::NetworkEntityInfo* main_player_info);
  private:
  const ::Protocol::NetworkEntityInfo& _internal_main_player_info() const;
  ::Protocol::NetworkEntityInfo* _internal_mutable_main_player_info();
  public:
  void unsafe_arena_set_allocated_main_player_info(
      ::Protocol::NetworkEntityInfo* main_player_info);
  ::Protocol::NetworkEntityInfo* unsafe_arena_release_main_player_info();

  // @@protoc_insertion_point(class_scope:Protocol.S_CreateMainPlayerPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::NetworkEntityInfo* main_player_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class S_SyncEntitiesPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SyncEntitiesPacket) */ {
 public:
  inline S_SyncEntitiesPacket() : S_SyncEntitiesPacket(nullptr) {}
  ~S_SyncEntitiesPacket() override;
  explicit PROTOBUF_CONSTEXPR S_SyncEntitiesPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SyncEntitiesPacket(const S_SyncEntitiesPacket& from);
  S_SyncEntitiesPacket(S_SyncEntitiesPacket&& from) noexcept
    : S_SyncEntitiesPacket() {
    *this = ::std::move(from);
  }

  inline S_SyncEntitiesPacket& operator=(const S_SyncEntitiesPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SyncEntitiesPacket& operator=(S_SyncEntitiesPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SyncEntitiesPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SyncEntitiesPacket* internal_default_instance() {
    return reinterpret_cast<const S_SyncEntitiesPacket*>(
               &_S_SyncEntitiesPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S_SyncEntitiesPacket& a, S_SyncEntitiesPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SyncEntitiesPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SyncEntitiesPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_SyncEntitiesPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_SyncEntitiesPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_SyncEntitiesPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_SyncEntitiesPacket& from) {
    S_SyncEntitiesPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SyncEntitiesPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SyncEntitiesPacket";
  }
  protected:
  explicit S_SyncEntitiesPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersInfoFieldNumber = 1,
    kMonstersInfoFieldNumber = 2,
  };
  // repeated .Protocol.NetworkEntityInfo players_info = 1;
  int players_info_size() const;
  private:
  int _internal_players_info_size() const;
  public:
  void clear_players_info();
  ::Protocol::NetworkEntityInfo* mutable_players_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::NetworkEntityInfo >*
      mutable_players_info();
  private:
  const ::Protocol::NetworkEntityInfo& _internal_players_info(int index) const;
  ::Protocol::NetworkEntityInfo* _internal_add_players_info();
  public:
  const ::Protocol::NetworkEntityInfo& players_info(int index) const;
  ::Protocol::NetworkEntityInfo* add_players_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::NetworkEntityInfo >&
      players_info() const;

  // repeated .Protocol.NetworkMonsterInfo monsters_info = 2;
  int monsters_info_size() const;
  private:
  int _internal_monsters_info_size() const;
  public:
  void clear_monsters_info();
  ::Protocol::NetworkMonsterInfo* mutable_monsters_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::NetworkMonsterInfo >*
      mutable_monsters_info();
  private:
  const ::Protocol::NetworkMonsterInfo& _internal_monsters_info(int index) const;
  ::Protocol::NetworkMonsterInfo* _internal_add_monsters_info();
  public:
  const ::Protocol::NetworkMonsterInfo& monsters_info(int index) const;
  ::Protocol::NetworkMonsterInfo* add_monsters_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::NetworkMonsterInfo >&
      monsters_info() const;

  // @@protoc_insertion_point(class_scope:Protocol.S_SyncEntitiesPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::NetworkEntityInfo > players_info_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::NetworkMonsterInfo > monsters_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class C_MoveEntityPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_MoveEntityPacket) */ {
 public:
  inline C_MoveEntityPacket() : C_MoveEntityPacket(nullptr) {}
  ~C_MoveEntityPacket() override;
  explicit PROTOBUF_CONSTEXPR C_MoveEntityPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_MoveEntityPacket(const C_MoveEntityPacket& from);
  C_MoveEntityPacket(C_MoveEntityPacket&& from) noexcept
    : C_MoveEntityPacket() {
    *this = ::std::move(from);
  }

  inline C_MoveEntityPacket& operator=(const C_MoveEntityPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_MoveEntityPacket& operator=(C_MoveEntityPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_MoveEntityPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_MoveEntityPacket* internal_default_instance() {
    return reinterpret_cast<const C_MoveEntityPacket*>(
               &_C_MoveEntityPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(C_MoveEntityPacket& a, C_MoveEntityPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(C_MoveEntityPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_MoveEntityPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_MoveEntityPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_MoveEntityPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_MoveEntityPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_MoveEntityPacket& from) {
    C_MoveEntityPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_MoveEntityPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_MoveEntityPacket";
  }
  protected:
  explicit C_MoveEntityPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityInfoFieldNumber = 1,
  };
  // .Protocol.NetworkEntityInfo entity_info = 1;
  bool has_entity_info() const;
  private:
  bool _internal_has_entity_info() const;
  public:
  void clear_entity_info();
  const ::Protocol::NetworkEntityInfo& entity_info() const;
  PROTOBUF_NODISCARD ::Protocol::NetworkEntityInfo* release_entity_info();
  ::Protocol::NetworkEntityInfo* mutable_entity_info();
  void set_allocated_entity_info(::Protocol::NetworkEntityInfo* entity_info);
  private:
  const ::Protocol::NetworkEntityInfo& _internal_entity_info() const;
  ::Protocol::NetworkEntityInfo* _internal_mutable_entity_info();
  public:
  void unsafe_arena_set_allocated_entity_info(
      ::Protocol::NetworkEntityInfo* entity_info);
  ::Protocol::NetworkEntityInfo* unsafe_arena_release_entity_info();

  // @@protoc_insertion_point(class_scope:Protocol.C_MoveEntityPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::NetworkEntityInfo* entity_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class S_MoveEntityPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_MoveEntityPacket) */ {
 public:
  inline S_MoveEntityPacket() : S_MoveEntityPacket(nullptr) {}
  ~S_MoveEntityPacket() override;
  explicit PROTOBUF_CONSTEXPR S_MoveEntityPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MoveEntityPacket(const S_MoveEntityPacket& from);
  S_MoveEntityPacket(S_MoveEntityPacket&& from) noexcept
    : S_MoveEntityPacket() {
    *this = ::std::move(from);
  }

  inline S_MoveEntityPacket& operator=(const S_MoveEntityPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MoveEntityPacket& operator=(S_MoveEntityPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MoveEntityPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MoveEntityPacket* internal_default_instance() {
    return reinterpret_cast<const S_MoveEntityPacket*>(
               &_S_MoveEntityPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S_MoveEntityPacket& a, S_MoveEntityPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MoveEntityPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MoveEntityPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_MoveEntityPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_MoveEntityPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_MoveEntityPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_MoveEntityPacket& from) {
    S_MoveEntityPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MoveEntityPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_MoveEntityPacket";
  }
  protected:
  explicit S_MoveEntityPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityInfoFieldNumber = 1,
  };
  // .Protocol.NetworkEntityInfo entity_info = 1;
  bool has_entity_info() const;
  private:
  bool _internal_has_entity_info() const;
  public:
  void clear_entity_info();
  const ::Protocol::NetworkEntityInfo& entity_info() const;
  PROTOBUF_NODISCARD ::Protocol::NetworkEntityInfo* release_entity_info();
  ::Protocol::NetworkEntityInfo* mutable_entity_info();
  void set_allocated_entity_info(::Protocol::NetworkEntityInfo* entity_info);
  private:
  const ::Protocol::NetworkEntityInfo& _internal_entity_info() const;
  ::Protocol::NetworkEntityInfo* _internal_mutable_entity_info();
  public:
  void unsafe_arena_set_allocated_entity_info(
      ::Protocol::NetworkEntityInfo* entity_info);
  ::Protocol::NetworkEntityInfo* unsafe_arena_release_entity_info();

  // @@protoc_insertion_point(class_scope:Protocol.S_MoveEntityPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::NetworkEntityInfo* entity_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class S_ModifyPlayerInformationPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ModifyPlayerInformationPacket) */ {
 public:
  inline S_ModifyPlayerInformationPacket() : S_ModifyPlayerInformationPacket(nullptr) {}
  ~S_ModifyPlayerInformationPacket() override;
  explicit PROTOBUF_CONSTEXPR S_ModifyPlayerInformationPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ModifyPlayerInformationPacket(const S_ModifyPlayerInformationPacket& from);
  S_ModifyPlayerInformationPacket(S_ModifyPlayerInformationPacket&& from) noexcept
    : S_ModifyPlayerInformationPacket() {
    *this = ::std::move(from);
  }

  inline S_ModifyPlayerInformationPacket& operator=(const S_ModifyPlayerInformationPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ModifyPlayerInformationPacket& operator=(S_ModifyPlayerInformationPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ModifyPlayerInformationPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ModifyPlayerInformationPacket* internal_default_instance() {
    return reinterpret_cast<const S_ModifyPlayerInformationPacket*>(
               &_S_ModifyPlayerInformationPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(S_ModifyPlayerInformationPacket& a, S_ModifyPlayerInformationPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ModifyPlayerInformationPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ModifyPlayerInformationPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ModifyPlayerInformationPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ModifyPlayerInformationPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ModifyPlayerInformationPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ModifyPlayerInformationPacket& from) {
    S_ModifyPlayerInformationPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ModifyPlayerInformationPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ModifyPlayerInformationPacket";
  }
  protected:
  explicit S_ModifyPlayerInformationPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerInfoFieldNumber = 1,
  };
  // .Protocol.NetworkEntityInfo player_info = 1;
  bool has_player_info() const;
  private:
  bool _internal_has_player_info() const;
  public:
  void clear_player_info();
  const ::Protocol::NetworkEntityInfo& player_info() const;
  PROTOBUF_NODISCARD ::Protocol::NetworkEntityInfo* release_player_info();
  ::Protocol::NetworkEntityInfo* mutable_player_info();
  void set_allocated_player_info(::Protocol::NetworkEntityInfo* player_info);
  private:
  const ::Protocol::NetworkEntityInfo& _internal_player_info() const;
  ::Protocol::NetworkEntityInfo* _internal_mutable_player_info();
  public:
  void unsafe_arena_set_allocated_player_info(
      ::Protocol::NetworkEntityInfo* player_info);
  ::Protocol::NetworkEntityInfo* unsafe_arena_release_player_info();

  // @@protoc_insertion_point(class_scope:Protocol.S_ModifyPlayerInformationPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::NetworkEntityInfo* player_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class C_ModifyEntityLookAtDirectionPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ModifyEntityLookAtDirectionPacket) */ {
 public:
  inline C_ModifyEntityLookAtDirectionPacket() : C_ModifyEntityLookAtDirectionPacket(nullptr) {}
  ~C_ModifyEntityLookAtDirectionPacket() override;
  explicit PROTOBUF_CONSTEXPR C_ModifyEntityLookAtDirectionPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ModifyEntityLookAtDirectionPacket(const C_ModifyEntityLookAtDirectionPacket& from);
  C_ModifyEntityLookAtDirectionPacket(C_ModifyEntityLookAtDirectionPacket&& from) noexcept
    : C_ModifyEntityLookAtDirectionPacket() {
    *this = ::std::move(from);
  }

  inline C_ModifyEntityLookAtDirectionPacket& operator=(const C_ModifyEntityLookAtDirectionPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ModifyEntityLookAtDirectionPacket& operator=(C_ModifyEntityLookAtDirectionPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ModifyEntityLookAtDirectionPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ModifyEntityLookAtDirectionPacket* internal_default_instance() {
    return reinterpret_cast<const C_ModifyEntityLookAtDirectionPacket*>(
               &_C_ModifyEntityLookAtDirectionPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(C_ModifyEntityLookAtDirectionPacket& a, C_ModifyEntityLookAtDirectionPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ModifyEntityLookAtDirectionPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ModifyEntityLookAtDirectionPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_ModifyEntityLookAtDirectionPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_ModifyEntityLookAtDirectionPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_ModifyEntityLookAtDirectionPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_ModifyEntityLookAtDirectionPacket& from) {
    C_ModifyEntityLookAtDirectionPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ModifyEntityLookAtDirectionPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ModifyEntityLookAtDirectionPacket";
  }
  protected:
  explicit C_ModifyEntityLookAtDirectionPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityInfoFieldNumber = 1,
  };
  // .Protocol.NetworkEntityInfo entity_info = 1;
  bool has_entity_info() const;
  private:
  bool _internal_has_entity_info() const;
  public:
  void clear_entity_info();
  const ::Protocol::NetworkEntityInfo& entity_info() const;
  PROTOBUF_NODISCARD ::Protocol::NetworkEntityInfo* release_entity_info();
  ::Protocol::NetworkEntityInfo* mutable_entity_info();
  void set_allocated_entity_info(::Protocol::NetworkEntityInfo* entity_info);
  private:
  const ::Protocol::NetworkEntityInfo& _internal_entity_info() const;
  ::Protocol::NetworkEntityInfo* _internal_mutable_entity_info();
  public:
  void unsafe_arena_set_allocated_entity_info(
      ::Protocol::NetworkEntityInfo* entity_info);
  ::Protocol::NetworkEntityInfo* unsafe_arena_release_entity_info();

  // @@protoc_insertion_point(class_scope:Protocol.C_ModifyEntityLookAtDirectionPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::NetworkEntityInfo* entity_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class S_ModifyEntityLookAtDirectionPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ModifyEntityLookAtDirectionPacket) */ {
 public:
  inline S_ModifyEntityLookAtDirectionPacket() : S_ModifyEntityLookAtDirectionPacket(nullptr) {}
  ~S_ModifyEntityLookAtDirectionPacket() override;
  explicit PROTOBUF_CONSTEXPR S_ModifyEntityLookAtDirectionPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ModifyEntityLookAtDirectionPacket(const S_ModifyEntityLookAtDirectionPacket& from);
  S_ModifyEntityLookAtDirectionPacket(S_ModifyEntityLookAtDirectionPacket&& from) noexcept
    : S_ModifyEntityLookAtDirectionPacket() {
    *this = ::std::move(from);
  }

  inline S_ModifyEntityLookAtDirectionPacket& operator=(const S_ModifyEntityLookAtDirectionPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ModifyEntityLookAtDirectionPacket& operator=(S_ModifyEntityLookAtDirectionPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ModifyEntityLookAtDirectionPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ModifyEntityLookAtDirectionPacket* internal_default_instance() {
    return reinterpret_cast<const S_ModifyEntityLookAtDirectionPacket*>(
               &_S_ModifyEntityLookAtDirectionPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(S_ModifyEntityLookAtDirectionPacket& a, S_ModifyEntityLookAtDirectionPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ModifyEntityLookAtDirectionPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ModifyEntityLookAtDirectionPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ModifyEntityLookAtDirectionPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ModifyEntityLookAtDirectionPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ModifyEntityLookAtDirectionPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ModifyEntityLookAtDirectionPacket& from) {
    S_ModifyEntityLookAtDirectionPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ModifyEntityLookAtDirectionPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ModifyEntityLookAtDirectionPacket";
  }
  protected:
  explicit S_ModifyEntityLookAtDirectionPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityInfoFieldNumber = 1,
  };
  // .Protocol.NetworkEntityInfo entity_info = 1;
  bool has_entity_info() const;
  private:
  bool _internal_has_entity_info() const;
  public:
  void clear_entity_info();
  const ::Protocol::NetworkEntityInfo& entity_info() const;
  PROTOBUF_NODISCARD ::Protocol::NetworkEntityInfo* release_entity_info();
  ::Protocol::NetworkEntityInfo* mutable_entity_info();
  void set_allocated_entity_info(::Protocol::NetworkEntityInfo* entity_info);
  private:
  const ::Protocol::NetworkEntityInfo& _internal_entity_info() const;
  ::Protocol::NetworkEntityInfo* _internal_mutable_entity_info();
  public:
  void unsafe_arena_set_allocated_entity_info(
      ::Protocol::NetworkEntityInfo* entity_info);
  ::Protocol::NetworkEntityInfo* unsafe_arena_release_entity_info();

  // @@protoc_insertion_point(class_scope:Protocol.S_ModifyEntityLookAtDirectionPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::NetworkEntityInfo* entity_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class C_ModifyEntityStatePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ModifyEntityStatePacket) */ {
 public:
  inline C_ModifyEntityStatePacket() : C_ModifyEntityStatePacket(nullptr) {}
  ~C_ModifyEntityStatePacket() override;
  explicit PROTOBUF_CONSTEXPR C_ModifyEntityStatePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ModifyEntityStatePacket(const C_ModifyEntityStatePacket& from);
  C_ModifyEntityStatePacket(C_ModifyEntityStatePacket&& from) noexcept
    : C_ModifyEntityStatePacket() {
    *this = ::std::move(from);
  }

  inline C_ModifyEntityStatePacket& operator=(const C_ModifyEntityStatePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ModifyEntityStatePacket& operator=(C_ModifyEntityStatePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ModifyEntityStatePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ModifyEntityStatePacket* internal_default_instance() {
    return reinterpret_cast<const C_ModifyEntityStatePacket*>(
               &_C_ModifyEntityStatePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(C_ModifyEntityStatePacket& a, C_ModifyEntityStatePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ModifyEntityStatePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ModifyEntityStatePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_ModifyEntityStatePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_ModifyEntityStatePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_ModifyEntityStatePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_ModifyEntityStatePacket& from) {
    C_ModifyEntityStatePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ModifyEntityStatePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ModifyEntityStatePacket";
  }
  protected:
  explicit C_ModifyEntityStatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityInfoFieldNumber = 1,
  };
  // .Protocol.NetworkEntityInfo entity_info = 1;
  bool has_entity_info() const;
  private:
  bool _internal_has_entity_info() const;
  public:
  void clear_entity_info();
  const ::Protocol::NetworkEntityInfo& entity_info() const;
  PROTOBUF_NODISCARD ::Protocol::NetworkEntityInfo* release_entity_info();
  ::Protocol::NetworkEntityInfo* mutable_entity_info();
  void set_allocated_entity_info(::Protocol::NetworkEntityInfo* entity_info);
  private:
  const ::Protocol::NetworkEntityInfo& _internal_entity_info() const;
  ::Protocol::NetworkEntityInfo* _internal_mutable_entity_info();
  public:
  void unsafe_arena_set_allocated_entity_info(
      ::Protocol::NetworkEntityInfo* entity_info);
  ::Protocol::NetworkEntityInfo* unsafe_arena_release_entity_info();

  // @@protoc_insertion_point(class_scope:Protocol.C_ModifyEntityStatePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::NetworkEntityInfo* entity_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class S_ModifyEntityStatePacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ModifyEntityStatePacket) */ {
 public:
  inline S_ModifyEntityStatePacket() : S_ModifyEntityStatePacket(nullptr) {}
  ~S_ModifyEntityStatePacket() override;
  explicit PROTOBUF_CONSTEXPR S_ModifyEntityStatePacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ModifyEntityStatePacket(const S_ModifyEntityStatePacket& from);
  S_ModifyEntityStatePacket(S_ModifyEntityStatePacket&& from) noexcept
    : S_ModifyEntityStatePacket() {
    *this = ::std::move(from);
  }

  inline S_ModifyEntityStatePacket& operator=(const S_ModifyEntityStatePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ModifyEntityStatePacket& operator=(S_ModifyEntityStatePacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ModifyEntityStatePacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ModifyEntityStatePacket* internal_default_instance() {
    return reinterpret_cast<const S_ModifyEntityStatePacket*>(
               &_S_ModifyEntityStatePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(S_ModifyEntityStatePacket& a, S_ModifyEntityStatePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ModifyEntityStatePacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ModifyEntityStatePacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ModifyEntityStatePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ModifyEntityStatePacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ModifyEntityStatePacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ModifyEntityStatePacket& from) {
    S_ModifyEntityStatePacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ModifyEntityStatePacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ModifyEntityStatePacket";
  }
  protected:
  explicit S_ModifyEntityStatePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityInfoFieldNumber = 1,
  };
  // .Protocol.NetworkEntityInfo entity_info = 1;
  bool has_entity_info() const;
  private:
  bool _internal_has_entity_info() const;
  public:
  void clear_entity_info();
  const ::Protocol::NetworkEntityInfo& entity_info() const;
  PROTOBUF_NODISCARD ::Protocol::NetworkEntityInfo* release_entity_info();
  ::Protocol::NetworkEntityInfo* mutable_entity_info();
  void set_allocated_entity_info(::Protocol::NetworkEntityInfo* entity_info);
  private:
  const ::Protocol::NetworkEntityInfo& _internal_entity_info() const;
  ::Protocol::NetworkEntityInfo* _internal_mutable_entity_info();
  public:
  void unsafe_arena_set_allocated_entity_info(
      ::Protocol::NetworkEntityInfo* entity_info);
  ::Protocol::NetworkEntityInfo* unsafe_arena_release_entity_info();

  // @@protoc_insertion_point(class_scope:Protocol.S_ModifyEntityStatePacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::NetworkEntityInfo* entity_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class C_AttckToEntityPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_AttckToEntityPacket) */ {
 public:
  inline C_AttckToEntityPacket() : C_AttckToEntityPacket(nullptr) {}
  ~C_AttckToEntityPacket() override;
  explicit PROTOBUF_CONSTEXPR C_AttckToEntityPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_AttckToEntityPacket(const C_AttckToEntityPacket& from);
  C_AttckToEntityPacket(C_AttckToEntityPacket&& from) noexcept
    : C_AttckToEntityPacket() {
    *this = ::std::move(from);
  }

  inline C_AttckToEntityPacket& operator=(const C_AttckToEntityPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_AttckToEntityPacket& operator=(C_AttckToEntityPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_AttckToEntityPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_AttckToEntityPacket* internal_default_instance() {
    return reinterpret_cast<const C_AttckToEntityPacket*>(
               &_C_AttckToEntityPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(C_AttckToEntityPacket& a, C_AttckToEntityPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(C_AttckToEntityPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_AttckToEntityPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_AttckToEntityPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_AttckToEntityPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_AttckToEntityPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_AttckToEntityPacket& from) {
    C_AttckToEntityPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_AttckToEntityPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_AttckToEntityPacket";
  }
  protected:
  explicit C_AttckToEntityPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttackerInfoFieldNumber = 1,
    kVictimInfoFieldNumber = 2,
  };
  // .Protocol.NetworkEntityInfo attacker_info = 1;
  bool has_attacker_info() const;
  private:
  bool _internal_has_attacker_info() const;
  public:
  void clear_attacker_info();
  const ::Protocol::NetworkEntityInfo& attacker_info() const;
  PROTOBUF_NODISCARD ::Protocol::NetworkEntityInfo* release_attacker_info();
  ::Protocol::NetworkEntityInfo* mutable_attacker_info();
  void set_allocated_attacker_info(::Protocol::NetworkEntityInfo* attacker_info);
  private:
  const ::Protocol::NetworkEntityInfo& _internal_attacker_info() const;
  ::Protocol::NetworkEntityInfo* _internal_mutable_attacker_info();
  public:
  void unsafe_arena_set_allocated_attacker_info(
      ::Protocol::NetworkEntityInfo* attacker_info);
  ::Protocol::NetworkEntityInfo* unsafe_arena_release_attacker_info();

  // .Protocol.NetworkEntityInfo victim_info = 2;
  bool has_victim_info() const;
  private:
  bool _internal_has_victim_info() const;
  public:
  void clear_victim_info();
  const ::Protocol::NetworkEntityInfo& victim_info() const;
  PROTOBUF_NODISCARD ::Protocol::NetworkEntityInfo* release_victim_info();
  ::Protocol::NetworkEntityInfo* mutable_victim_info();
  void set_allocated_victim_info(::Protocol::NetworkEntityInfo* victim_info);
  private:
  const ::Protocol::NetworkEntityInfo& _internal_victim_info() const;
  ::Protocol::NetworkEntityInfo* _internal_mutable_victim_info();
  public:
  void unsafe_arena_set_allocated_victim_info(
      ::Protocol::NetworkEntityInfo* victim_info);
  ::Protocol::NetworkEntityInfo* unsafe_arena_release_victim_info();

  // @@protoc_insertion_point(class_scope:Protocol.C_AttckToEntityPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::NetworkEntityInfo* attacker_info_;
    ::Protocol::NetworkEntityInfo* victim_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class S_HitDamageToEntityPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_HitDamageToEntityPacket) */ {
 public:
  inline S_HitDamageToEntityPacket() : S_HitDamageToEntityPacket(nullptr) {}
  ~S_HitDamageToEntityPacket() override;
  explicit PROTOBUF_CONSTEXPR S_HitDamageToEntityPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_HitDamageToEntityPacket(const S_HitDamageToEntityPacket& from);
  S_HitDamageToEntityPacket(S_HitDamageToEntityPacket&& from) noexcept
    : S_HitDamageToEntityPacket() {
    *this = ::std::move(from);
  }

  inline S_HitDamageToEntityPacket& operator=(const S_HitDamageToEntityPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_HitDamageToEntityPacket& operator=(S_HitDamageToEntityPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_HitDamageToEntityPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_HitDamageToEntityPacket* internal_default_instance() {
    return reinterpret_cast<const S_HitDamageToEntityPacket*>(
               &_S_HitDamageToEntityPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(S_HitDamageToEntityPacket& a, S_HitDamageToEntityPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(S_HitDamageToEntityPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_HitDamageToEntityPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_HitDamageToEntityPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_HitDamageToEntityPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_HitDamageToEntityPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_HitDamageToEntityPacket& from) {
    S_HitDamageToEntityPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_HitDamageToEntityPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_HitDamageToEntityPacket";
  }
  protected:
  explicit S_HitDamageToEntityPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttackerInfoFieldNumber = 1,
    kVictimInfoFieldNumber = 2,
  };
  // .Protocol.NetworkEntityInfo attacker_info = 1;
  bool has_attacker_info() const;
  private:
  bool _internal_has_attacker_info() const;
  public:
  void clear_attacker_info();
  const ::Protocol::NetworkEntityInfo& attacker_info() const;
  PROTOBUF_NODISCARD ::Protocol::NetworkEntityInfo* release_attacker_info();
  ::Protocol::NetworkEntityInfo* mutable_attacker_info();
  void set_allocated_attacker_info(::Protocol::NetworkEntityInfo* attacker_info);
  private:
  const ::Protocol::NetworkEntityInfo& _internal_attacker_info() const;
  ::Protocol::NetworkEntityInfo* _internal_mutable_attacker_info();
  public:
  void unsafe_arena_set_allocated_attacker_info(
      ::Protocol::NetworkEntityInfo* attacker_info);
  ::Protocol::NetworkEntityInfo* unsafe_arena_release_attacker_info();

  // .Protocol.NetworkEntityInfo victim_info = 2;
  bool has_victim_info() const;
  private:
  bool _internal_has_victim_info() const;
  public:
  void clear_victim_info();
  const ::Protocol::NetworkEntityInfo& victim_info() const;
  PROTOBUF_NODISCARD ::Protocol::NetworkEntityInfo* release_victim_info();
  ::Protocol::NetworkEntityInfo* mutable_victim_info();
  void set_allocated_victim_info(::Protocol::NetworkEntityInfo* victim_info);
  private:
  const ::Protocol::NetworkEntityInfo& _internal_victim_info() const;
  ::Protocol::NetworkEntityInfo* _internal_mutable_victim_info();
  public:
  void unsafe_arena_set_allocated_victim_info(
      ::Protocol::NetworkEntityInfo* victim_info);
  ::Protocol::NetworkEntityInfo* unsafe_arena_release_victim_info();

  // @@protoc_insertion_point(class_scope:Protocol.S_HitDamageToEntityPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::NetworkEntityInfo* attacker_info_;
    ::Protocol::NetworkEntityInfo* victim_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class S_DiePlayerPacket final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_DiePlayerPacket) */ {
 public:
  inline S_DiePlayerPacket() : S_DiePlayerPacket(nullptr) {}
  ~S_DiePlayerPacket() override;
  explicit PROTOBUF_CONSTEXPR S_DiePlayerPacket(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_DiePlayerPacket(const S_DiePlayerPacket& from);
  S_DiePlayerPacket(S_DiePlayerPacket&& from) noexcept
    : S_DiePlayerPacket() {
    *this = ::std::move(from);
  }

  inline S_DiePlayerPacket& operator=(const S_DiePlayerPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_DiePlayerPacket& operator=(S_DiePlayerPacket&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_DiePlayerPacket& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_DiePlayerPacket* internal_default_instance() {
    return reinterpret_cast<const S_DiePlayerPacket*>(
               &_S_DiePlayerPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(S_DiePlayerPacket& a, S_DiePlayerPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(S_DiePlayerPacket* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_DiePlayerPacket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_DiePlayerPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_DiePlayerPacket>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_DiePlayerPacket& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_DiePlayerPacket& from) {
    S_DiePlayerPacket::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_DiePlayerPacket* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_DiePlayerPacket";
  }
  protected:
  explicit S_DiePlayerPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVictimInfoFieldNumber = 1,
  };
  // .Protocol.NetworkEntityInfo victim_info = 1;
  bool has_victim_info() const;
  private:
  bool _internal_has_victim_info() const;
  public:
  void clear_victim_info();
  const ::Protocol::NetworkEntityInfo& victim_info() const;
  PROTOBUF_NODISCARD ::Protocol::NetworkEntityInfo* release_victim_info();
  ::Protocol::NetworkEntityInfo* mutable_victim_info();
  void set_allocated_victim_info(::Protocol::NetworkEntityInfo* victim_info);
  private:
  const ::Protocol::NetworkEntityInfo& _internal_victim_info() const;
  ::Protocol::NetworkEntityInfo* _internal_mutable_victim_info();
  public:
  void unsafe_arena_set_allocated_victim_info(
      ::Protocol::NetworkEntityInfo* victim_info);
  ::Protocol::NetworkEntityInfo* unsafe_arena_release_victim_info();

  // @@protoc_insertion_point(class_scope:Protocol.S_DiePlayerPacket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::NetworkEntityInfo* victim_info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// S_EnterGamePacket

// bool enter_success = 1;
inline void S_EnterGamePacket::clear_enter_success() {
  _impl_.enter_success_ = false;
}
inline bool S_EnterGamePacket::_internal_enter_success() const {
  return _impl_.enter_success_;
}
inline bool S_EnterGamePacket::enter_success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_EnterGamePacket.enter_success)
  return _internal_enter_success();
}
inline void S_EnterGamePacket::_internal_set_enter_success(bool value) {
  
  _impl_.enter_success_ = value;
}
inline void S_EnterGamePacket::set_enter_success(bool value) {
  _internal_set_enter_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_EnterGamePacket.enter_success)
}

// uint64 user_id = 2;
inline void S_EnterGamePacket::clear_user_id() {
  _impl_.user_id_ = uint64_t{0u};
}
inline uint64_t S_EnterGamePacket::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint64_t S_EnterGamePacket::user_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_EnterGamePacket.user_id)
  return _internal_user_id();
}
inline void S_EnterGamePacket::_internal_set_user_id(uint64_t value) {
  
  _impl_.user_id_ = value;
}
inline void S_EnterGamePacket::set_user_id(uint64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S_EnterGamePacket.user_id)
}

// -------------------------------------------------------------------

// S_LeaveGamePacket

// bool leave_success = 1;
inline void S_LeaveGamePacket::clear_leave_success() {
  _impl_.leave_success_ = false;
}
inline bool S_LeaveGamePacket::_internal_leave_success() const {
  return _impl_.leave_success_;
}
inline bool S_LeaveGamePacket::leave_success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LeaveGamePacket.leave_success)
  return _internal_leave_success();
}
inline void S_LeaveGamePacket::_internal_set_leave_success(bool value) {
  
  _impl_.leave_success_ = value;
}
inline void S_LeaveGamePacket::set_leave_success(bool value) {
  _internal_set_leave_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_LeaveGamePacket.leave_success)
}

// uint64 user_id = 2;
inline void S_LeaveGamePacket::clear_user_id() {
  _impl_.user_id_ = uint64_t{0u};
}
inline uint64_t S_LeaveGamePacket::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint64_t S_LeaveGamePacket::user_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LeaveGamePacket.user_id)
  return _internal_user_id();
}
inline void S_LeaveGamePacket::_internal_set_user_id(uint64_t value) {
  
  _impl_.user_id_ = value;
}
inline void S_LeaveGamePacket::set_user_id(uint64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S_LeaveGamePacket.user_id)
}

// .Protocol.NetworkEntityInfo player_info = 3;
inline bool S_LeaveGamePacket::_internal_has_player_info() const {
  return this != internal_default_instance() && _impl_.player_info_ != nullptr;
}
inline bool S_LeaveGamePacket::has_player_info() const {
  return _internal_has_player_info();
}
inline const ::Protocol::NetworkEntityInfo& S_LeaveGamePacket::_internal_player_info() const {
  const ::Protocol::NetworkEntityInfo* p = _impl_.player_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::NetworkEntityInfo&>(
      ::Protocol::_NetworkEntityInfo_default_instance_);
}
inline const ::Protocol::NetworkEntityInfo& S_LeaveGamePacket::player_info() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LeaveGamePacket.player_info)
  return _internal_player_info();
}
inline void S_LeaveGamePacket::unsafe_arena_set_allocated_player_info(
    ::Protocol::NetworkEntityInfo* player_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_info_);
  }
  _impl_.player_info_ = player_info;
  if (player_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_LeaveGamePacket.player_info)
}
inline ::Protocol::NetworkEntityInfo* S_LeaveGamePacket::release_player_info() {
  
  ::Protocol::NetworkEntityInfo* temp = _impl_.player_info_;
  _impl_.player_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::NetworkEntityInfo* S_LeaveGamePacket::unsafe_arena_release_player_info() {
  // @@protoc_insertion_point(field_release:Protocol.S_LeaveGamePacket.player_info)
  
  ::Protocol::NetworkEntityInfo* temp = _impl_.player_info_;
  _impl_.player_info_ = nullptr;
  return temp;
}
inline ::Protocol::NetworkEntityInfo* S_LeaveGamePacket::_internal_mutable_player_info() {
  
  if (_impl_.player_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::NetworkEntityInfo>(GetArenaForAllocation());
    _impl_.player_info_ = p;
  }
  return _impl_.player_info_;
}
inline ::Protocol::NetworkEntityInfo* S_LeaveGamePacket::mutable_player_info() {
  ::Protocol::NetworkEntityInfo* _msg = _internal_mutable_player_info();
  // @@protoc_insertion_point(field_mutable:Protocol.S_LeaveGamePacket.player_info)
  return _msg;
}
inline void S_LeaveGamePacket::set_allocated_player_info(::Protocol::NetworkEntityInfo* player_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_info_);
  }
  if (player_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_info));
    if (message_arena != submessage_arena) {
      player_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_info_ = player_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_LeaveGamePacket.player_info)
}

// -------------------------------------------------------------------

// S_CreateMainPlayerPacket

// .Protocol.NetworkEntityInfo main_player_info = 1;
inline bool S_CreateMainPlayerPacket::_internal_has_main_player_info() const {
  return this != internal_default_instance() && _impl_.main_player_info_ != nullptr;
}
inline bool S_CreateMainPlayerPacket::has_main_player_info() const {
  return _internal_has_main_player_info();
}
inline const ::Protocol::NetworkEntityInfo& S_CreateMainPlayerPacket::_internal_main_player_info() const {
  const ::Protocol::NetworkEntityInfo* p = _impl_.main_player_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::NetworkEntityInfo&>(
      ::Protocol::_NetworkEntityInfo_default_instance_);
}
inline const ::Protocol::NetworkEntityInfo& S_CreateMainPlayerPacket::main_player_info() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CreateMainPlayerPacket.main_player_info)
  return _internal_main_player_info();
}
inline void S_CreateMainPlayerPacket::unsafe_arena_set_allocated_main_player_info(
    ::Protocol::NetworkEntityInfo* main_player_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.main_player_info_);
  }
  _impl_.main_player_info_ = main_player_info;
  if (main_player_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_CreateMainPlayerPacket.main_player_info)
}
inline ::Protocol::NetworkEntityInfo* S_CreateMainPlayerPacket::release_main_player_info() {
  
  ::Protocol::NetworkEntityInfo* temp = _impl_.main_player_info_;
  _impl_.main_player_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::NetworkEntityInfo* S_CreateMainPlayerPacket::unsafe_arena_release_main_player_info() {
  // @@protoc_insertion_point(field_release:Protocol.S_CreateMainPlayerPacket.main_player_info)
  
  ::Protocol::NetworkEntityInfo* temp = _impl_.main_player_info_;
  _impl_.main_player_info_ = nullptr;
  return temp;
}
inline ::Protocol::NetworkEntityInfo* S_CreateMainPlayerPacket::_internal_mutable_main_player_info() {
  
  if (_impl_.main_player_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::NetworkEntityInfo>(GetArenaForAllocation());
    _impl_.main_player_info_ = p;
  }
  return _impl_.main_player_info_;
}
inline ::Protocol::NetworkEntityInfo* S_CreateMainPlayerPacket::mutable_main_player_info() {
  ::Protocol::NetworkEntityInfo* _msg = _internal_mutable_main_player_info();
  // @@protoc_insertion_point(field_mutable:Protocol.S_CreateMainPlayerPacket.main_player_info)
  return _msg;
}
inline void S_CreateMainPlayerPacket::set_allocated_main_player_info(::Protocol::NetworkEntityInfo* main_player_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.main_player_info_);
  }
  if (main_player_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(main_player_info));
    if (message_arena != submessage_arena) {
      main_player_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, main_player_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.main_player_info_ = main_player_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_CreateMainPlayerPacket.main_player_info)
}

// -------------------------------------------------------------------

// S_SyncEntitiesPacket

// repeated .Protocol.NetworkEntityInfo players_info = 1;
inline int S_SyncEntitiesPacket::_internal_players_info_size() const {
  return _impl_.players_info_.size();
}
inline int S_SyncEntitiesPacket::players_info_size() const {
  return _internal_players_info_size();
}
inline ::Protocol::NetworkEntityInfo* S_SyncEntitiesPacket::mutable_players_info(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_SyncEntitiesPacket.players_info)
  return _impl_.players_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::NetworkEntityInfo >*
S_SyncEntitiesPacket::mutable_players_info() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_SyncEntitiesPacket.players_info)
  return &_impl_.players_info_;
}
inline const ::Protocol::NetworkEntityInfo& S_SyncEntitiesPacket::_internal_players_info(int index) const {
  return _impl_.players_info_.Get(index);
}
inline const ::Protocol::NetworkEntityInfo& S_SyncEntitiesPacket::players_info(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_SyncEntitiesPacket.players_info)
  return _internal_players_info(index);
}
inline ::Protocol::NetworkEntityInfo* S_SyncEntitiesPacket::_internal_add_players_info() {
  return _impl_.players_info_.Add();
}
inline ::Protocol::NetworkEntityInfo* S_SyncEntitiesPacket::add_players_info() {
  ::Protocol::NetworkEntityInfo* _add = _internal_add_players_info();
  // @@protoc_insertion_point(field_add:Protocol.S_SyncEntitiesPacket.players_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::NetworkEntityInfo >&
S_SyncEntitiesPacket::players_info() const {
  // @@protoc_insertion_point(field_list:Protocol.S_SyncEntitiesPacket.players_info)
  return _impl_.players_info_;
}

// repeated .Protocol.NetworkMonsterInfo monsters_info = 2;
inline int S_SyncEntitiesPacket::_internal_monsters_info_size() const {
  return _impl_.monsters_info_.size();
}
inline int S_SyncEntitiesPacket::monsters_info_size() const {
  return _internal_monsters_info_size();
}
inline ::Protocol::NetworkMonsterInfo* S_SyncEntitiesPacket::mutable_monsters_info(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_SyncEntitiesPacket.monsters_info)
  return _impl_.monsters_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::NetworkMonsterInfo >*
S_SyncEntitiesPacket::mutable_monsters_info() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_SyncEntitiesPacket.monsters_info)
  return &_impl_.monsters_info_;
}
inline const ::Protocol::NetworkMonsterInfo& S_SyncEntitiesPacket::_internal_monsters_info(int index) const {
  return _impl_.monsters_info_.Get(index);
}
inline const ::Protocol::NetworkMonsterInfo& S_SyncEntitiesPacket::monsters_info(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_SyncEntitiesPacket.monsters_info)
  return _internal_monsters_info(index);
}
inline ::Protocol::NetworkMonsterInfo* S_SyncEntitiesPacket::_internal_add_monsters_info() {
  return _impl_.monsters_info_.Add();
}
inline ::Protocol::NetworkMonsterInfo* S_SyncEntitiesPacket::add_monsters_info() {
  ::Protocol::NetworkMonsterInfo* _add = _internal_add_monsters_info();
  // @@protoc_insertion_point(field_add:Protocol.S_SyncEntitiesPacket.monsters_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::NetworkMonsterInfo >&
S_SyncEntitiesPacket::monsters_info() const {
  // @@protoc_insertion_point(field_list:Protocol.S_SyncEntitiesPacket.monsters_info)
  return _impl_.monsters_info_;
}

// -------------------------------------------------------------------

// C_MoveEntityPacket

// .Protocol.NetworkEntityInfo entity_info = 1;
inline bool C_MoveEntityPacket::_internal_has_entity_info() const {
  return this != internal_default_instance() && _impl_.entity_info_ != nullptr;
}
inline bool C_MoveEntityPacket::has_entity_info() const {
  return _internal_has_entity_info();
}
inline const ::Protocol::NetworkEntityInfo& C_MoveEntityPacket::_internal_entity_info() const {
  const ::Protocol::NetworkEntityInfo* p = _impl_.entity_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::NetworkEntityInfo&>(
      ::Protocol::_NetworkEntityInfo_default_instance_);
}
inline const ::Protocol::NetworkEntityInfo& C_MoveEntityPacket::entity_info() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MoveEntityPacket.entity_info)
  return _internal_entity_info();
}
inline void C_MoveEntityPacket::unsafe_arena_set_allocated_entity_info(
    ::Protocol::NetworkEntityInfo* entity_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.entity_info_);
  }
  _impl_.entity_info_ = entity_info;
  if (entity_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_MoveEntityPacket.entity_info)
}
inline ::Protocol::NetworkEntityInfo* C_MoveEntityPacket::release_entity_info() {
  
  ::Protocol::NetworkEntityInfo* temp = _impl_.entity_info_;
  _impl_.entity_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::NetworkEntityInfo* C_MoveEntityPacket::unsafe_arena_release_entity_info() {
  // @@protoc_insertion_point(field_release:Protocol.C_MoveEntityPacket.entity_info)
  
  ::Protocol::NetworkEntityInfo* temp = _impl_.entity_info_;
  _impl_.entity_info_ = nullptr;
  return temp;
}
inline ::Protocol::NetworkEntityInfo* C_MoveEntityPacket::_internal_mutable_entity_info() {
  
  if (_impl_.entity_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::NetworkEntityInfo>(GetArenaForAllocation());
    _impl_.entity_info_ = p;
  }
  return _impl_.entity_info_;
}
inline ::Protocol::NetworkEntityInfo* C_MoveEntityPacket::mutable_entity_info() {
  ::Protocol::NetworkEntityInfo* _msg = _internal_mutable_entity_info();
  // @@protoc_insertion_point(field_mutable:Protocol.C_MoveEntityPacket.entity_info)
  return _msg;
}
inline void C_MoveEntityPacket::set_allocated_entity_info(::Protocol::NetworkEntityInfo* entity_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.entity_info_);
  }
  if (entity_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_info));
    if (message_arena != submessage_arena) {
      entity_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.entity_info_ = entity_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_MoveEntityPacket.entity_info)
}

// -------------------------------------------------------------------

// S_MoveEntityPacket

// .Protocol.NetworkEntityInfo entity_info = 1;
inline bool S_MoveEntityPacket::_internal_has_entity_info() const {
  return this != internal_default_instance() && _impl_.entity_info_ != nullptr;
}
inline bool S_MoveEntityPacket::has_entity_info() const {
  return _internal_has_entity_info();
}
inline const ::Protocol::NetworkEntityInfo& S_MoveEntityPacket::_internal_entity_info() const {
  const ::Protocol::NetworkEntityInfo* p = _impl_.entity_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::NetworkEntityInfo&>(
      ::Protocol::_NetworkEntityInfo_default_instance_);
}
inline const ::Protocol::NetworkEntityInfo& S_MoveEntityPacket::entity_info() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MoveEntityPacket.entity_info)
  return _internal_entity_info();
}
inline void S_MoveEntityPacket::unsafe_arena_set_allocated_entity_info(
    ::Protocol::NetworkEntityInfo* entity_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.entity_info_);
  }
  _impl_.entity_info_ = entity_info;
  if (entity_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_MoveEntityPacket.entity_info)
}
inline ::Protocol::NetworkEntityInfo* S_MoveEntityPacket::release_entity_info() {
  
  ::Protocol::NetworkEntityInfo* temp = _impl_.entity_info_;
  _impl_.entity_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::NetworkEntityInfo* S_MoveEntityPacket::unsafe_arena_release_entity_info() {
  // @@protoc_insertion_point(field_release:Protocol.S_MoveEntityPacket.entity_info)
  
  ::Protocol::NetworkEntityInfo* temp = _impl_.entity_info_;
  _impl_.entity_info_ = nullptr;
  return temp;
}
inline ::Protocol::NetworkEntityInfo* S_MoveEntityPacket::_internal_mutable_entity_info() {
  
  if (_impl_.entity_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::NetworkEntityInfo>(GetArenaForAllocation());
    _impl_.entity_info_ = p;
  }
  return _impl_.entity_info_;
}
inline ::Protocol::NetworkEntityInfo* S_MoveEntityPacket::mutable_entity_info() {
  ::Protocol::NetworkEntityInfo* _msg = _internal_mutable_entity_info();
  // @@protoc_insertion_point(field_mutable:Protocol.S_MoveEntityPacket.entity_info)
  return _msg;
}
inline void S_MoveEntityPacket::set_allocated_entity_info(::Protocol::NetworkEntityInfo* entity_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.entity_info_);
  }
  if (entity_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_info));
    if (message_arena != submessage_arena) {
      entity_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.entity_info_ = entity_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_MoveEntityPacket.entity_info)
}

// -------------------------------------------------------------------

// S_ModifyPlayerInformationPacket

// .Protocol.NetworkEntityInfo player_info = 1;
inline bool S_ModifyPlayerInformationPacket::_internal_has_player_info() const {
  return this != internal_default_instance() && _impl_.player_info_ != nullptr;
}
inline bool S_ModifyPlayerInformationPacket::has_player_info() const {
  return _internal_has_player_info();
}
inline const ::Protocol::NetworkEntityInfo& S_ModifyPlayerInformationPacket::_internal_player_info() const {
  const ::Protocol::NetworkEntityInfo* p = _impl_.player_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::NetworkEntityInfo&>(
      ::Protocol::_NetworkEntityInfo_default_instance_);
}
inline const ::Protocol::NetworkEntityInfo& S_ModifyPlayerInformationPacket::player_info() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ModifyPlayerInformationPacket.player_info)
  return _internal_player_info();
}
inline void S_ModifyPlayerInformationPacket::unsafe_arena_set_allocated_player_info(
    ::Protocol::NetworkEntityInfo* player_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_info_);
  }
  _impl_.player_info_ = player_info;
  if (player_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ModifyPlayerInformationPacket.player_info)
}
inline ::Protocol::NetworkEntityInfo* S_ModifyPlayerInformationPacket::release_player_info() {
  
  ::Protocol::NetworkEntityInfo* temp = _impl_.player_info_;
  _impl_.player_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::NetworkEntityInfo* S_ModifyPlayerInformationPacket::unsafe_arena_release_player_info() {
  // @@protoc_insertion_point(field_release:Protocol.S_ModifyPlayerInformationPacket.player_info)
  
  ::Protocol::NetworkEntityInfo* temp = _impl_.player_info_;
  _impl_.player_info_ = nullptr;
  return temp;
}
inline ::Protocol::NetworkEntityInfo* S_ModifyPlayerInformationPacket::_internal_mutable_player_info() {
  
  if (_impl_.player_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::NetworkEntityInfo>(GetArenaForAllocation());
    _impl_.player_info_ = p;
  }
  return _impl_.player_info_;
}
inline ::Protocol::NetworkEntityInfo* S_ModifyPlayerInformationPacket::mutable_player_info() {
  ::Protocol::NetworkEntityInfo* _msg = _internal_mutable_player_info();
  // @@protoc_insertion_point(field_mutable:Protocol.S_ModifyPlayerInformationPacket.player_info)
  return _msg;
}
inline void S_ModifyPlayerInformationPacket::set_allocated_player_info(::Protocol::NetworkEntityInfo* player_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_info_);
  }
  if (player_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_info));
    if (message_arena != submessage_arena) {
      player_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_info_ = player_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ModifyPlayerInformationPacket.player_info)
}

// -------------------------------------------------------------------

// C_ModifyEntityLookAtDirectionPacket

// .Protocol.NetworkEntityInfo entity_info = 1;
inline bool C_ModifyEntityLookAtDirectionPacket::_internal_has_entity_info() const {
  return this != internal_default_instance() && _impl_.entity_info_ != nullptr;
}
inline bool C_ModifyEntityLookAtDirectionPacket::has_entity_info() const {
  return _internal_has_entity_info();
}
inline const ::Protocol::NetworkEntityInfo& C_ModifyEntityLookAtDirectionPacket::_internal_entity_info() const {
  const ::Protocol::NetworkEntityInfo* p = _impl_.entity_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::NetworkEntityInfo&>(
      ::Protocol::_NetworkEntityInfo_default_instance_);
}
inline const ::Protocol::NetworkEntityInfo& C_ModifyEntityLookAtDirectionPacket::entity_info() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ModifyEntityLookAtDirectionPacket.entity_info)
  return _internal_entity_info();
}
inline void C_ModifyEntityLookAtDirectionPacket::unsafe_arena_set_allocated_entity_info(
    ::Protocol::NetworkEntityInfo* entity_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.entity_info_);
  }
  _impl_.entity_info_ = entity_info;
  if (entity_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_ModifyEntityLookAtDirectionPacket.entity_info)
}
inline ::Protocol::NetworkEntityInfo* C_ModifyEntityLookAtDirectionPacket::release_entity_info() {
  
  ::Protocol::NetworkEntityInfo* temp = _impl_.entity_info_;
  _impl_.entity_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::NetworkEntityInfo* C_ModifyEntityLookAtDirectionPacket::unsafe_arena_release_entity_info() {
  // @@protoc_insertion_point(field_release:Protocol.C_ModifyEntityLookAtDirectionPacket.entity_info)
  
  ::Protocol::NetworkEntityInfo* temp = _impl_.entity_info_;
  _impl_.entity_info_ = nullptr;
  return temp;
}
inline ::Protocol::NetworkEntityInfo* C_ModifyEntityLookAtDirectionPacket::_internal_mutable_entity_info() {
  
  if (_impl_.entity_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::NetworkEntityInfo>(GetArenaForAllocation());
    _impl_.entity_info_ = p;
  }
  return _impl_.entity_info_;
}
inline ::Protocol::NetworkEntityInfo* C_ModifyEntityLookAtDirectionPacket::mutable_entity_info() {
  ::Protocol::NetworkEntityInfo* _msg = _internal_mutable_entity_info();
  // @@protoc_insertion_point(field_mutable:Protocol.C_ModifyEntityLookAtDirectionPacket.entity_info)
  return _msg;
}
inline void C_ModifyEntityLookAtDirectionPacket::set_allocated_entity_info(::Protocol::NetworkEntityInfo* entity_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.entity_info_);
  }
  if (entity_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_info));
    if (message_arena != submessage_arena) {
      entity_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.entity_info_ = entity_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_ModifyEntityLookAtDirectionPacket.entity_info)
}

// -------------------------------------------------------------------

// S_ModifyEntityLookAtDirectionPacket

// .Protocol.NetworkEntityInfo entity_info = 1;
inline bool S_ModifyEntityLookAtDirectionPacket::_internal_has_entity_info() const {
  return this != internal_default_instance() && _impl_.entity_info_ != nullptr;
}
inline bool S_ModifyEntityLookAtDirectionPacket::has_entity_info() const {
  return _internal_has_entity_info();
}
inline const ::Protocol::NetworkEntityInfo& S_ModifyEntityLookAtDirectionPacket::_internal_entity_info() const {
  const ::Protocol::NetworkEntityInfo* p = _impl_.entity_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::NetworkEntityInfo&>(
      ::Protocol::_NetworkEntityInfo_default_instance_);
}
inline const ::Protocol::NetworkEntityInfo& S_ModifyEntityLookAtDirectionPacket::entity_info() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ModifyEntityLookAtDirectionPacket.entity_info)
  return _internal_entity_info();
}
inline void S_ModifyEntityLookAtDirectionPacket::unsafe_arena_set_allocated_entity_info(
    ::Protocol::NetworkEntityInfo* entity_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.entity_info_);
  }
  _impl_.entity_info_ = entity_info;
  if (entity_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ModifyEntityLookAtDirectionPacket.entity_info)
}
inline ::Protocol::NetworkEntityInfo* S_ModifyEntityLookAtDirectionPacket::release_entity_info() {
  
  ::Protocol::NetworkEntityInfo* temp = _impl_.entity_info_;
  _impl_.entity_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::NetworkEntityInfo* S_ModifyEntityLookAtDirectionPacket::unsafe_arena_release_entity_info() {
  // @@protoc_insertion_point(field_release:Protocol.S_ModifyEntityLookAtDirectionPacket.entity_info)
  
  ::Protocol::NetworkEntityInfo* temp = _impl_.entity_info_;
  _impl_.entity_info_ = nullptr;
  return temp;
}
inline ::Protocol::NetworkEntityInfo* S_ModifyEntityLookAtDirectionPacket::_internal_mutable_entity_info() {
  
  if (_impl_.entity_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::NetworkEntityInfo>(GetArenaForAllocation());
    _impl_.entity_info_ = p;
  }
  return _impl_.entity_info_;
}
inline ::Protocol::NetworkEntityInfo* S_ModifyEntityLookAtDirectionPacket::mutable_entity_info() {
  ::Protocol::NetworkEntityInfo* _msg = _internal_mutable_entity_info();
  // @@protoc_insertion_point(field_mutable:Protocol.S_ModifyEntityLookAtDirectionPacket.entity_info)
  return _msg;
}
inline void S_ModifyEntityLookAtDirectionPacket::set_allocated_entity_info(::Protocol::NetworkEntityInfo* entity_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.entity_info_);
  }
  if (entity_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_info));
    if (message_arena != submessage_arena) {
      entity_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.entity_info_ = entity_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ModifyEntityLookAtDirectionPacket.entity_info)
}

// -------------------------------------------------------------------

// C_ModifyEntityStatePacket

// .Protocol.NetworkEntityInfo entity_info = 1;
inline bool C_ModifyEntityStatePacket::_internal_has_entity_info() const {
  return this != internal_default_instance() && _impl_.entity_info_ != nullptr;
}
inline bool C_ModifyEntityStatePacket::has_entity_info() const {
  return _internal_has_entity_info();
}
inline const ::Protocol::NetworkEntityInfo& C_ModifyEntityStatePacket::_internal_entity_info() const {
  const ::Protocol::NetworkEntityInfo* p = _impl_.entity_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::NetworkEntityInfo&>(
      ::Protocol::_NetworkEntityInfo_default_instance_);
}
inline const ::Protocol::NetworkEntityInfo& C_ModifyEntityStatePacket::entity_info() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ModifyEntityStatePacket.entity_info)
  return _internal_entity_info();
}
inline void C_ModifyEntityStatePacket::unsafe_arena_set_allocated_entity_info(
    ::Protocol::NetworkEntityInfo* entity_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.entity_info_);
  }
  _impl_.entity_info_ = entity_info;
  if (entity_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_ModifyEntityStatePacket.entity_info)
}
inline ::Protocol::NetworkEntityInfo* C_ModifyEntityStatePacket::release_entity_info() {
  
  ::Protocol::NetworkEntityInfo* temp = _impl_.entity_info_;
  _impl_.entity_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::NetworkEntityInfo* C_ModifyEntityStatePacket::unsafe_arena_release_entity_info() {
  // @@protoc_insertion_point(field_release:Protocol.C_ModifyEntityStatePacket.entity_info)
  
  ::Protocol::NetworkEntityInfo* temp = _impl_.entity_info_;
  _impl_.entity_info_ = nullptr;
  return temp;
}
inline ::Protocol::NetworkEntityInfo* C_ModifyEntityStatePacket::_internal_mutable_entity_info() {
  
  if (_impl_.entity_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::NetworkEntityInfo>(GetArenaForAllocation());
    _impl_.entity_info_ = p;
  }
  return _impl_.entity_info_;
}
inline ::Protocol::NetworkEntityInfo* C_ModifyEntityStatePacket::mutable_entity_info() {
  ::Protocol::NetworkEntityInfo* _msg = _internal_mutable_entity_info();
  // @@protoc_insertion_point(field_mutable:Protocol.C_ModifyEntityStatePacket.entity_info)
  return _msg;
}
inline void C_ModifyEntityStatePacket::set_allocated_entity_info(::Protocol::NetworkEntityInfo* entity_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.entity_info_);
  }
  if (entity_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_info));
    if (message_arena != submessage_arena) {
      entity_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.entity_info_ = entity_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_ModifyEntityStatePacket.entity_info)
}

// -------------------------------------------------------------------

// S_ModifyEntityStatePacket

// .Protocol.NetworkEntityInfo entity_info = 1;
inline bool S_ModifyEntityStatePacket::_internal_has_entity_info() const {
  return this != internal_default_instance() && _impl_.entity_info_ != nullptr;
}
inline bool S_ModifyEntityStatePacket::has_entity_info() const {
  return _internal_has_entity_info();
}
inline const ::Protocol::NetworkEntityInfo& S_ModifyEntityStatePacket::_internal_entity_info() const {
  const ::Protocol::NetworkEntityInfo* p = _impl_.entity_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::NetworkEntityInfo&>(
      ::Protocol::_NetworkEntityInfo_default_instance_);
}
inline const ::Protocol::NetworkEntityInfo& S_ModifyEntityStatePacket::entity_info() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ModifyEntityStatePacket.entity_info)
  return _internal_entity_info();
}
inline void S_ModifyEntityStatePacket::unsafe_arena_set_allocated_entity_info(
    ::Protocol::NetworkEntityInfo* entity_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.entity_info_);
  }
  _impl_.entity_info_ = entity_info;
  if (entity_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ModifyEntityStatePacket.entity_info)
}
inline ::Protocol::NetworkEntityInfo* S_ModifyEntityStatePacket::release_entity_info() {
  
  ::Protocol::NetworkEntityInfo* temp = _impl_.entity_info_;
  _impl_.entity_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::NetworkEntityInfo* S_ModifyEntityStatePacket::unsafe_arena_release_entity_info() {
  // @@protoc_insertion_point(field_release:Protocol.S_ModifyEntityStatePacket.entity_info)
  
  ::Protocol::NetworkEntityInfo* temp = _impl_.entity_info_;
  _impl_.entity_info_ = nullptr;
  return temp;
}
inline ::Protocol::NetworkEntityInfo* S_ModifyEntityStatePacket::_internal_mutable_entity_info() {
  
  if (_impl_.entity_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::NetworkEntityInfo>(GetArenaForAllocation());
    _impl_.entity_info_ = p;
  }
  return _impl_.entity_info_;
}
inline ::Protocol::NetworkEntityInfo* S_ModifyEntityStatePacket::mutable_entity_info() {
  ::Protocol::NetworkEntityInfo* _msg = _internal_mutable_entity_info();
  // @@protoc_insertion_point(field_mutable:Protocol.S_ModifyEntityStatePacket.entity_info)
  return _msg;
}
inline void S_ModifyEntityStatePacket::set_allocated_entity_info(::Protocol::NetworkEntityInfo* entity_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.entity_info_);
  }
  if (entity_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_info));
    if (message_arena != submessage_arena) {
      entity_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.entity_info_ = entity_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ModifyEntityStatePacket.entity_info)
}

// -------------------------------------------------------------------

// C_AttckToEntityPacket

// .Protocol.NetworkEntityInfo attacker_info = 1;
inline bool C_AttckToEntityPacket::_internal_has_attacker_info() const {
  return this != internal_default_instance() && _impl_.attacker_info_ != nullptr;
}
inline bool C_AttckToEntityPacket::has_attacker_info() const {
  return _internal_has_attacker_info();
}
inline const ::Protocol::NetworkEntityInfo& C_AttckToEntityPacket::_internal_attacker_info() const {
  const ::Protocol::NetworkEntityInfo* p = _impl_.attacker_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::NetworkEntityInfo&>(
      ::Protocol::_NetworkEntityInfo_default_instance_);
}
inline const ::Protocol::NetworkEntityInfo& C_AttckToEntityPacket::attacker_info() const {
  // @@protoc_insertion_point(field_get:Protocol.C_AttckToEntityPacket.attacker_info)
  return _internal_attacker_info();
}
inline void C_AttckToEntityPacket::unsafe_arena_set_allocated_attacker_info(
    ::Protocol::NetworkEntityInfo* attacker_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attacker_info_);
  }
  _impl_.attacker_info_ = attacker_info;
  if (attacker_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_AttckToEntityPacket.attacker_info)
}
inline ::Protocol::NetworkEntityInfo* C_AttckToEntityPacket::release_attacker_info() {
  
  ::Protocol::NetworkEntityInfo* temp = _impl_.attacker_info_;
  _impl_.attacker_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::NetworkEntityInfo* C_AttckToEntityPacket::unsafe_arena_release_attacker_info() {
  // @@protoc_insertion_point(field_release:Protocol.C_AttckToEntityPacket.attacker_info)
  
  ::Protocol::NetworkEntityInfo* temp = _impl_.attacker_info_;
  _impl_.attacker_info_ = nullptr;
  return temp;
}
inline ::Protocol::NetworkEntityInfo* C_AttckToEntityPacket::_internal_mutable_attacker_info() {
  
  if (_impl_.attacker_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::NetworkEntityInfo>(GetArenaForAllocation());
    _impl_.attacker_info_ = p;
  }
  return _impl_.attacker_info_;
}
inline ::Protocol::NetworkEntityInfo* C_AttckToEntityPacket::mutable_attacker_info() {
  ::Protocol::NetworkEntityInfo* _msg = _internal_mutable_attacker_info();
  // @@protoc_insertion_point(field_mutable:Protocol.C_AttckToEntityPacket.attacker_info)
  return _msg;
}
inline void C_AttckToEntityPacket::set_allocated_attacker_info(::Protocol::NetworkEntityInfo* attacker_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attacker_info_);
  }
  if (attacker_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attacker_info));
    if (message_arena != submessage_arena) {
      attacker_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attacker_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.attacker_info_ = attacker_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_AttckToEntityPacket.attacker_info)
}

// .Protocol.NetworkEntityInfo victim_info = 2;
inline bool C_AttckToEntityPacket::_internal_has_victim_info() const {
  return this != internal_default_instance() && _impl_.victim_info_ != nullptr;
}
inline bool C_AttckToEntityPacket::has_victim_info() const {
  return _internal_has_victim_info();
}
inline const ::Protocol::NetworkEntityInfo& C_AttckToEntityPacket::_internal_victim_info() const {
  const ::Protocol::NetworkEntityInfo* p = _impl_.victim_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::NetworkEntityInfo&>(
      ::Protocol::_NetworkEntityInfo_default_instance_);
}
inline const ::Protocol::NetworkEntityInfo& C_AttckToEntityPacket::victim_info() const {
  // @@protoc_insertion_point(field_get:Protocol.C_AttckToEntityPacket.victim_info)
  return _internal_victim_info();
}
inline void C_AttckToEntityPacket::unsafe_arena_set_allocated_victim_info(
    ::Protocol::NetworkEntityInfo* victim_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.victim_info_);
  }
  _impl_.victim_info_ = victim_info;
  if (victim_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.C_AttckToEntityPacket.victim_info)
}
inline ::Protocol::NetworkEntityInfo* C_AttckToEntityPacket::release_victim_info() {
  
  ::Protocol::NetworkEntityInfo* temp = _impl_.victim_info_;
  _impl_.victim_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::NetworkEntityInfo* C_AttckToEntityPacket::unsafe_arena_release_victim_info() {
  // @@protoc_insertion_point(field_release:Protocol.C_AttckToEntityPacket.victim_info)
  
  ::Protocol::NetworkEntityInfo* temp = _impl_.victim_info_;
  _impl_.victim_info_ = nullptr;
  return temp;
}
inline ::Protocol::NetworkEntityInfo* C_AttckToEntityPacket::_internal_mutable_victim_info() {
  
  if (_impl_.victim_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::NetworkEntityInfo>(GetArenaForAllocation());
    _impl_.victim_info_ = p;
  }
  return _impl_.victim_info_;
}
inline ::Protocol::NetworkEntityInfo* C_AttckToEntityPacket::mutable_victim_info() {
  ::Protocol::NetworkEntityInfo* _msg = _internal_mutable_victim_info();
  // @@protoc_insertion_point(field_mutable:Protocol.C_AttckToEntityPacket.victim_info)
  return _msg;
}
inline void C_AttckToEntityPacket::set_allocated_victim_info(::Protocol::NetworkEntityInfo* victim_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.victim_info_);
  }
  if (victim_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(victim_info));
    if (message_arena != submessage_arena) {
      victim_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, victim_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.victim_info_ = victim_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_AttckToEntityPacket.victim_info)
}

// -------------------------------------------------------------------

// S_HitDamageToEntityPacket

// .Protocol.NetworkEntityInfo attacker_info = 1;
inline bool S_HitDamageToEntityPacket::_internal_has_attacker_info() const {
  return this != internal_default_instance() && _impl_.attacker_info_ != nullptr;
}
inline bool S_HitDamageToEntityPacket::has_attacker_info() const {
  return _internal_has_attacker_info();
}
inline const ::Protocol::NetworkEntityInfo& S_HitDamageToEntityPacket::_internal_attacker_info() const {
  const ::Protocol::NetworkEntityInfo* p = _impl_.attacker_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::NetworkEntityInfo&>(
      ::Protocol::_NetworkEntityInfo_default_instance_);
}
inline const ::Protocol::NetworkEntityInfo& S_HitDamageToEntityPacket::attacker_info() const {
  // @@protoc_insertion_point(field_get:Protocol.S_HitDamageToEntityPacket.attacker_info)
  return _internal_attacker_info();
}
inline void S_HitDamageToEntityPacket::unsafe_arena_set_allocated_attacker_info(
    ::Protocol::NetworkEntityInfo* attacker_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attacker_info_);
  }
  _impl_.attacker_info_ = attacker_info;
  if (attacker_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_HitDamageToEntityPacket.attacker_info)
}
inline ::Protocol::NetworkEntityInfo* S_HitDamageToEntityPacket::release_attacker_info() {
  
  ::Protocol::NetworkEntityInfo* temp = _impl_.attacker_info_;
  _impl_.attacker_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::NetworkEntityInfo* S_HitDamageToEntityPacket::unsafe_arena_release_attacker_info() {
  // @@protoc_insertion_point(field_release:Protocol.S_HitDamageToEntityPacket.attacker_info)
  
  ::Protocol::NetworkEntityInfo* temp = _impl_.attacker_info_;
  _impl_.attacker_info_ = nullptr;
  return temp;
}
inline ::Protocol::NetworkEntityInfo* S_HitDamageToEntityPacket::_internal_mutable_attacker_info() {
  
  if (_impl_.attacker_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::NetworkEntityInfo>(GetArenaForAllocation());
    _impl_.attacker_info_ = p;
  }
  return _impl_.attacker_info_;
}
inline ::Protocol::NetworkEntityInfo* S_HitDamageToEntityPacket::mutable_attacker_info() {
  ::Protocol::NetworkEntityInfo* _msg = _internal_mutable_attacker_info();
  // @@protoc_insertion_point(field_mutable:Protocol.S_HitDamageToEntityPacket.attacker_info)
  return _msg;
}
inline void S_HitDamageToEntityPacket::set_allocated_attacker_info(::Protocol::NetworkEntityInfo* attacker_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attacker_info_);
  }
  if (attacker_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attacker_info));
    if (message_arena != submessage_arena) {
      attacker_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attacker_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.attacker_info_ = attacker_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_HitDamageToEntityPacket.attacker_info)
}

// .Protocol.NetworkEntityInfo victim_info = 2;
inline bool S_HitDamageToEntityPacket::_internal_has_victim_info() const {
  return this != internal_default_instance() && _impl_.victim_info_ != nullptr;
}
inline bool S_HitDamageToEntityPacket::has_victim_info() const {
  return _internal_has_victim_info();
}
inline const ::Protocol::NetworkEntityInfo& S_HitDamageToEntityPacket::_internal_victim_info() const {
  const ::Protocol::NetworkEntityInfo* p = _impl_.victim_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::NetworkEntityInfo&>(
      ::Protocol::_NetworkEntityInfo_default_instance_);
}
inline const ::Protocol::NetworkEntityInfo& S_HitDamageToEntityPacket::victim_info() const {
  // @@protoc_insertion_point(field_get:Protocol.S_HitDamageToEntityPacket.victim_info)
  return _internal_victim_info();
}
inline void S_HitDamageToEntityPacket::unsafe_arena_set_allocated_victim_info(
    ::Protocol::NetworkEntityInfo* victim_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.victim_info_);
  }
  _impl_.victim_info_ = victim_info;
  if (victim_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_HitDamageToEntityPacket.victim_info)
}
inline ::Protocol::NetworkEntityInfo* S_HitDamageToEntityPacket::release_victim_info() {
  
  ::Protocol::NetworkEntityInfo* temp = _impl_.victim_info_;
  _impl_.victim_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::NetworkEntityInfo* S_HitDamageToEntityPacket::unsafe_arena_release_victim_info() {
  // @@protoc_insertion_point(field_release:Protocol.S_HitDamageToEntityPacket.victim_info)
  
  ::Protocol::NetworkEntityInfo* temp = _impl_.victim_info_;
  _impl_.victim_info_ = nullptr;
  return temp;
}
inline ::Protocol::NetworkEntityInfo* S_HitDamageToEntityPacket::_internal_mutable_victim_info() {
  
  if (_impl_.victim_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::NetworkEntityInfo>(GetArenaForAllocation());
    _impl_.victim_info_ = p;
  }
  return _impl_.victim_info_;
}
inline ::Protocol::NetworkEntityInfo* S_HitDamageToEntityPacket::mutable_victim_info() {
  ::Protocol::NetworkEntityInfo* _msg = _internal_mutable_victim_info();
  // @@protoc_insertion_point(field_mutable:Protocol.S_HitDamageToEntityPacket.victim_info)
  return _msg;
}
inline void S_HitDamageToEntityPacket::set_allocated_victim_info(::Protocol::NetworkEntityInfo* victim_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.victim_info_);
  }
  if (victim_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(victim_info));
    if (message_arena != submessage_arena) {
      victim_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, victim_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.victim_info_ = victim_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_HitDamageToEntityPacket.victim_info)
}

// -------------------------------------------------------------------

// S_DiePlayerPacket

// .Protocol.NetworkEntityInfo victim_info = 1;
inline bool S_DiePlayerPacket::_internal_has_victim_info() const {
  return this != internal_default_instance() && _impl_.victim_info_ != nullptr;
}
inline bool S_DiePlayerPacket::has_victim_info() const {
  return _internal_has_victim_info();
}
inline const ::Protocol::NetworkEntityInfo& S_DiePlayerPacket::_internal_victim_info() const {
  const ::Protocol::NetworkEntityInfo* p = _impl_.victim_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::NetworkEntityInfo&>(
      ::Protocol::_NetworkEntityInfo_default_instance_);
}
inline const ::Protocol::NetworkEntityInfo& S_DiePlayerPacket::victim_info() const {
  // @@protoc_insertion_point(field_get:Protocol.S_DiePlayerPacket.victim_info)
  return _internal_victim_info();
}
inline void S_DiePlayerPacket::unsafe_arena_set_allocated_victim_info(
    ::Protocol::NetworkEntityInfo* victim_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.victim_info_);
  }
  _impl_.victim_info_ = victim_info;
  if (victim_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_DiePlayerPacket.victim_info)
}
inline ::Protocol::NetworkEntityInfo* S_DiePlayerPacket::release_victim_info() {
  
  ::Protocol::NetworkEntityInfo* temp = _impl_.victim_info_;
  _impl_.victim_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::NetworkEntityInfo* S_DiePlayerPacket::unsafe_arena_release_victim_info() {
  // @@protoc_insertion_point(field_release:Protocol.S_DiePlayerPacket.victim_info)
  
  ::Protocol::NetworkEntityInfo* temp = _impl_.victim_info_;
  _impl_.victim_info_ = nullptr;
  return temp;
}
inline ::Protocol::NetworkEntityInfo* S_DiePlayerPacket::_internal_mutable_victim_info() {
  
  if (_impl_.victim_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::NetworkEntityInfo>(GetArenaForAllocation());
    _impl_.victim_info_ = p;
  }
  return _impl_.victim_info_;
}
inline ::Protocol::NetworkEntityInfo* S_DiePlayerPacket::mutable_victim_info() {
  ::Protocol::NetworkEntityInfo* _msg = _internal_mutable_victim_info();
  // @@protoc_insertion_point(field_mutable:Protocol.S_DiePlayerPacket.victim_info)
  return _msg;
}
inline void S_DiePlayerPacket::set_allocated_victim_info(::Protocol::NetworkEntityInfo* victim_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.victim_info_);
  }
  if (victim_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(victim_info));
    if (message_arena != submessage_arena) {
      victim_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, victim_info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.victim_info_ = victim_info;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_DiePlayerPacket.victim_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Packet_2eproto
