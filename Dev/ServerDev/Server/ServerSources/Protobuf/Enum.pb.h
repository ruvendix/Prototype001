// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Enum.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Enum_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Enum_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Enum_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

enum ENetworkEntityLookAtDirection : int {
  Left = 0,
  Up = 1,
  Right = 2,
  Down = 3,
  Count = 4,
  ENetworkEntityLookAtDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ENetworkEntityLookAtDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ENetworkEntityLookAtDirection_IsValid(int value);
constexpr ENetworkEntityLookAtDirection ENetworkEntityLookAtDirection_MIN = Left;
constexpr ENetworkEntityLookAtDirection ENetworkEntityLookAtDirection_MAX = Count;
constexpr int ENetworkEntityLookAtDirection_ARRAYSIZE = ENetworkEntityLookAtDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENetworkEntityLookAtDirection_descriptor();
template<typename T>
inline const std::string& ENetworkEntityLookAtDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ENetworkEntityLookAtDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ENetworkEntityLookAtDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ENetworkEntityLookAtDirection_descriptor(), enum_t_value);
}
inline bool ENetworkEntityLookAtDirection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ENetworkEntityLookAtDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ENetworkEntityLookAtDirection>(
    ENetworkEntityLookAtDirection_descriptor(), name, value);
}
enum ENetworkEntityType : int {
  Player = 0,
  Monster = 1,
  ENetworkEntityType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ENetworkEntityType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ENetworkEntityType_IsValid(int value);
constexpr ENetworkEntityType ENetworkEntityType_MIN = Player;
constexpr ENetworkEntityType ENetworkEntityType_MAX = Monster;
constexpr int ENetworkEntityType_ARRAYSIZE = ENetworkEntityType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENetworkEntityType_descriptor();
template<typename T>
inline const std::string& ENetworkEntityType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ENetworkEntityType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ENetworkEntityType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ENetworkEntityType_descriptor(), enum_t_value);
}
inline bool ENetworkEntityType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ENetworkEntityType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ENetworkEntityType>(
    ENetworkEntityType_descriptor(), name, value);
}
enum ENetworkEntityState : int {
  Idle = 0,
  Walk = 1,
  Attack = 2,
  Defense = 3,
  Chase = 4,
  Death = 5,
  ENetworkEntityState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ENetworkEntityState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ENetworkEntityState_IsValid(int value);
constexpr ENetworkEntityState ENetworkEntityState_MIN = Idle;
constexpr ENetworkEntityState ENetworkEntityState_MAX = Death;
constexpr int ENetworkEntityState_ARRAYSIZE = ENetworkEntityState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENetworkEntityState_descriptor();
template<typename T>
inline const std::string& ENetworkEntityState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ENetworkEntityState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ENetworkEntityState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ENetworkEntityState_descriptor(), enum_t_value);
}
inline bool ENetworkEntityState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ENetworkEntityState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ENetworkEntityState>(
    ENetworkEntityState_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Protocol::ENetworkEntityLookAtDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::ENetworkEntityLookAtDirection>() {
  return ::Protocol::ENetworkEntityLookAtDirection_descriptor();
}
template <> struct is_proto_enum< ::Protocol::ENetworkEntityType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::ENetworkEntityType>() {
  return ::Protocol::ENetworkEntityType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::ENetworkEntityState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::ENetworkEntityState>() {
  return ::Protocol::ENetworkEntityState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto
