// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Packet_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Packet_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
#include "Struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Packet_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Packet_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Packet_2eproto;
namespace Protocol {
class S_EnterGame;
struct S_EnterGameDefaultTypeInternal;
extern S_EnterGameDefaultTypeInternal _S_EnterGame_default_instance_;
class S_GameEntityInfo;
struct S_GameEntityInfoDefaultTypeInternal;
extern S_GameEntityInfoDefaultTypeInternal _S_GameEntityInfo_default_instance_;
class S_SyncGameEntities;
struct S_SyncGameEntitiesDefaultTypeInternal;
extern S_SyncGameEntitiesDefaultTypeInternal _S_SyncGameEntities_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::S_EnterGame* Arena::CreateMaybeMessage<::Protocol::S_EnterGame>(Arena*);
template<> ::Protocol::S_GameEntityInfo* Arena::CreateMaybeMessage<::Protocol::S_GameEntityInfo>(Arena*);
template<> ::Protocol::S_SyncGameEntities* Arena::CreateMaybeMessage<::Protocol::S_SyncGameEntities>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class S_EnterGame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_EnterGame) */ {
 public:
  inline S_EnterGame() : S_EnterGame(nullptr) {}
  ~S_EnterGame() override;
  explicit PROTOBUF_CONSTEXPR S_EnterGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_EnterGame(const S_EnterGame& from);
  S_EnterGame(S_EnterGame&& from) noexcept
    : S_EnterGame() {
    *this = ::std::move(from);
  }

  inline S_EnterGame& operator=(const S_EnterGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_EnterGame& operator=(S_EnterGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_EnterGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_EnterGame* internal_default_instance() {
    return reinterpret_cast<const S_EnterGame*>(
               &_S_EnterGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(S_EnterGame& a, S_EnterGame& b) {
    a.Swap(&b);
  }
  inline void Swap(S_EnterGame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_EnterGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_EnterGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_EnterGame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_EnterGame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_EnterGame& from) {
    S_EnterGame::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_EnterGame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_EnterGame";
  }
  protected:
  explicit S_EnterGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kEnterSuccessFieldNumber = 1,
  };
  // uint64 user_id = 2;
  void clear_user_id();
  uint64_t user_id() const;
  void set_user_id(uint64_t value);
  private:
  uint64_t _internal_user_id() const;
  void _internal_set_user_id(uint64_t value);
  public:

  // bool enter_success = 1;
  void clear_enter_success();
  bool enter_success() const;
  void set_enter_success(bool value);
  private:
  bool _internal_enter_success() const;
  void _internal_set_enter_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_EnterGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t user_id_;
    bool enter_success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class S_GameEntityInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_GameEntityInfo) */ {
 public:
  inline S_GameEntityInfo() : S_GameEntityInfo(nullptr) {}
  ~S_GameEntityInfo() override;
  explicit PROTOBUF_CONSTEXPR S_GameEntityInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_GameEntityInfo(const S_GameEntityInfo& from);
  S_GameEntityInfo(S_GameEntityInfo&& from) noexcept
    : S_GameEntityInfo() {
    *this = ::std::move(from);
  }

  inline S_GameEntityInfo& operator=(const S_GameEntityInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_GameEntityInfo& operator=(S_GameEntityInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_GameEntityInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_GameEntityInfo* internal_default_instance() {
    return reinterpret_cast<const S_GameEntityInfo*>(
               &_S_GameEntityInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_GameEntityInfo& a, S_GameEntityInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(S_GameEntityInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_GameEntityInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_GameEntityInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_GameEntityInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_GameEntityInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_GameEntityInfo& from) {
    S_GameEntityInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_GameEntityInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_GameEntityInfo";
  }
  protected:
  explicit S_GameEntityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIdFieldNumber = 1,
    kCellPosXFieldNumber = 2,
    kCellPosYFieldNumber = 3,
    kLookAtDirFieldNumber = 4,
    kActionStateIdFieldNumber = 5,
    kMaxHpFieldNumber = 6,
    kHpFieldNumber = 7,
    kAttackFieldNumber = 8,
  };
  // uint64 entity_id = 1;
  void clear_entity_id();
  uint64_t entity_id() const;
  void set_entity_id(uint64_t value);
  private:
  uint64_t _internal_entity_id() const;
  void _internal_set_entity_id(uint64_t value);
  public:

  // uint32 cell_pos_x = 2;
  void clear_cell_pos_x();
  uint32_t cell_pos_x() const;
  void set_cell_pos_x(uint32_t value);
  private:
  uint32_t _internal_cell_pos_x() const;
  void _internal_set_cell_pos_x(uint32_t value);
  public:

  // uint32 cell_pos_y = 3;
  void clear_cell_pos_y();
  uint32_t cell_pos_y() const;
  void set_cell_pos_y(uint32_t value);
  private:
  uint32_t _internal_cell_pos_y() const;
  void _internal_set_cell_pos_y(uint32_t value);
  public:

  // .Protocol.EActorLookAtDir look_at_dir = 4;
  void clear_look_at_dir();
  ::Protocol::EActorLookAtDir look_at_dir() const;
  void set_look_at_dir(::Protocol::EActorLookAtDir value);
  private:
  ::Protocol::EActorLookAtDir _internal_look_at_dir() const;
  void _internal_set_look_at_dir(::Protocol::EActorLookAtDir value);
  public:

  // uint32 action_state_id = 5;
  void clear_action_state_id();
  uint32_t action_state_id() const;
  void set_action_state_id(uint32_t value);
  private:
  uint32_t _internal_action_state_id() const;
  void _internal_set_action_state_id(uint32_t value);
  public:

  // uint32 max_hp = 6;
  void clear_max_hp();
  uint32_t max_hp() const;
  void set_max_hp(uint32_t value);
  private:
  uint32_t _internal_max_hp() const;
  void _internal_set_max_hp(uint32_t value);
  public:

  // uint32 hp = 7;
  void clear_hp();
  uint32_t hp() const;
  void set_hp(uint32_t value);
  private:
  uint32_t _internal_hp() const;
  void _internal_set_hp(uint32_t value);
  public:

  // uint32 attack = 8;
  void clear_attack();
  uint32_t attack() const;
  void set_attack(uint32_t value);
  private:
  uint32_t _internal_attack() const;
  void _internal_set_attack(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_GameEntityInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t entity_id_;
    uint32_t cell_pos_x_;
    uint32_t cell_pos_y_;
    int look_at_dir_;
    uint32_t action_state_id_;
    uint32_t max_hp_;
    uint32_t hp_;
    uint32_t attack_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_2eproto;
};
// -------------------------------------------------------------------

class S_SyncGameEntities final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SyncGameEntities) */ {
 public:
  inline S_SyncGameEntities() : S_SyncGameEntities(nullptr) {}
  ~S_SyncGameEntities() override;
  explicit PROTOBUF_CONSTEXPR S_SyncGameEntities(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SyncGameEntities(const S_SyncGameEntities& from);
  S_SyncGameEntities(S_SyncGameEntities&& from) noexcept
    : S_SyncGameEntities() {
    *this = ::std::move(from);
  }

  inline S_SyncGameEntities& operator=(const S_SyncGameEntities& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SyncGameEntities& operator=(S_SyncGameEntities&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SyncGameEntities& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SyncGameEntities* internal_default_instance() {
    return reinterpret_cast<const S_SyncGameEntities*>(
               &_S_SyncGameEntities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(S_SyncGameEntities& a, S_SyncGameEntities& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SyncGameEntities* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SyncGameEntities* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_SyncGameEntities* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_SyncGameEntities>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_SyncGameEntities& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_SyncGameEntities& from) {
    S_SyncGameEntities::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SyncGameEntities* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SyncGameEntities";
  }
  protected:
  explicit S_SyncGameEntities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameEntitiesFieldNumber = 1,
  };
  // repeated .Protocol.S_GameEntityInfo gameEntities = 1;
  int gameentities_size() const;
  private:
  int _internal_gameentities_size() const;
  public:
  void clear_gameentities();
  ::Protocol::S_GameEntityInfo* mutable_gameentities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_GameEntityInfo >*
      mutable_gameentities();
  private:
  const ::Protocol::S_GameEntityInfo& _internal_gameentities(int index) const;
  ::Protocol::S_GameEntityInfo* _internal_add_gameentities();
  public:
  const ::Protocol::S_GameEntityInfo& gameentities(int index) const;
  ::Protocol::S_GameEntityInfo* add_gameentities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_GameEntityInfo >&
      gameentities() const;

  // @@protoc_insertion_point(class_scope:Protocol.S_SyncGameEntities)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_GameEntityInfo > gameentities_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Packet_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// S_EnterGame

// bool enter_success = 1;
inline void S_EnterGame::clear_enter_success() {
  _impl_.enter_success_ = false;
}
inline bool S_EnterGame::_internal_enter_success() const {
  return _impl_.enter_success_;
}
inline bool S_EnterGame::enter_success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_EnterGame.enter_success)
  return _internal_enter_success();
}
inline void S_EnterGame::_internal_set_enter_success(bool value) {
  
  _impl_.enter_success_ = value;
}
inline void S_EnterGame::set_enter_success(bool value) {
  _internal_set_enter_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_EnterGame.enter_success)
}

// uint64 user_id = 2;
inline void S_EnterGame::clear_user_id() {
  _impl_.user_id_ = uint64_t{0u};
}
inline uint64_t S_EnterGame::_internal_user_id() const {
  return _impl_.user_id_;
}
inline uint64_t S_EnterGame::user_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_EnterGame.user_id)
  return _internal_user_id();
}
inline void S_EnterGame::_internal_set_user_id(uint64_t value) {
  
  _impl_.user_id_ = value;
}
inline void S_EnterGame::set_user_id(uint64_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S_EnterGame.user_id)
}

// -------------------------------------------------------------------

// S_GameEntityInfo

// uint64 entity_id = 1;
inline void S_GameEntityInfo::clear_entity_id() {
  _impl_.entity_id_ = uint64_t{0u};
}
inline uint64_t S_GameEntityInfo::_internal_entity_id() const {
  return _impl_.entity_id_;
}
inline uint64_t S_GameEntityInfo::entity_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_GameEntityInfo.entity_id)
  return _internal_entity_id();
}
inline void S_GameEntityInfo::_internal_set_entity_id(uint64_t value) {
  
  _impl_.entity_id_ = value;
}
inline void S_GameEntityInfo::set_entity_id(uint64_t value) {
  _internal_set_entity_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S_GameEntityInfo.entity_id)
}

// uint32 cell_pos_x = 2;
inline void S_GameEntityInfo::clear_cell_pos_x() {
  _impl_.cell_pos_x_ = 0u;
}
inline uint32_t S_GameEntityInfo::_internal_cell_pos_x() const {
  return _impl_.cell_pos_x_;
}
inline uint32_t S_GameEntityInfo::cell_pos_x() const {
  // @@protoc_insertion_point(field_get:Protocol.S_GameEntityInfo.cell_pos_x)
  return _internal_cell_pos_x();
}
inline void S_GameEntityInfo::_internal_set_cell_pos_x(uint32_t value) {
  
  _impl_.cell_pos_x_ = value;
}
inline void S_GameEntityInfo::set_cell_pos_x(uint32_t value) {
  _internal_set_cell_pos_x(value);
  // @@protoc_insertion_point(field_set:Protocol.S_GameEntityInfo.cell_pos_x)
}

// uint32 cell_pos_y = 3;
inline void S_GameEntityInfo::clear_cell_pos_y() {
  _impl_.cell_pos_y_ = 0u;
}
inline uint32_t S_GameEntityInfo::_internal_cell_pos_y() const {
  return _impl_.cell_pos_y_;
}
inline uint32_t S_GameEntityInfo::cell_pos_y() const {
  // @@protoc_insertion_point(field_get:Protocol.S_GameEntityInfo.cell_pos_y)
  return _internal_cell_pos_y();
}
inline void S_GameEntityInfo::_internal_set_cell_pos_y(uint32_t value) {
  
  _impl_.cell_pos_y_ = value;
}
inline void S_GameEntityInfo::set_cell_pos_y(uint32_t value) {
  _internal_set_cell_pos_y(value);
  // @@protoc_insertion_point(field_set:Protocol.S_GameEntityInfo.cell_pos_y)
}

// .Protocol.EActorLookAtDir look_at_dir = 4;
inline void S_GameEntityInfo::clear_look_at_dir() {
  _impl_.look_at_dir_ = 0;
}
inline ::Protocol::EActorLookAtDir S_GameEntityInfo::_internal_look_at_dir() const {
  return static_cast< ::Protocol::EActorLookAtDir >(_impl_.look_at_dir_);
}
inline ::Protocol::EActorLookAtDir S_GameEntityInfo::look_at_dir() const {
  // @@protoc_insertion_point(field_get:Protocol.S_GameEntityInfo.look_at_dir)
  return _internal_look_at_dir();
}
inline void S_GameEntityInfo::_internal_set_look_at_dir(::Protocol::EActorLookAtDir value) {
  
  _impl_.look_at_dir_ = value;
}
inline void S_GameEntityInfo::set_look_at_dir(::Protocol::EActorLookAtDir value) {
  _internal_set_look_at_dir(value);
  // @@protoc_insertion_point(field_set:Protocol.S_GameEntityInfo.look_at_dir)
}

// uint32 action_state_id = 5;
inline void S_GameEntityInfo::clear_action_state_id() {
  _impl_.action_state_id_ = 0u;
}
inline uint32_t S_GameEntityInfo::_internal_action_state_id() const {
  return _impl_.action_state_id_;
}
inline uint32_t S_GameEntityInfo::action_state_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_GameEntityInfo.action_state_id)
  return _internal_action_state_id();
}
inline void S_GameEntityInfo::_internal_set_action_state_id(uint32_t value) {
  
  _impl_.action_state_id_ = value;
}
inline void S_GameEntityInfo::set_action_state_id(uint32_t value) {
  _internal_set_action_state_id(value);
  // @@protoc_insertion_point(field_set:Protocol.S_GameEntityInfo.action_state_id)
}

// uint32 max_hp = 6;
inline void S_GameEntityInfo::clear_max_hp() {
  _impl_.max_hp_ = 0u;
}
inline uint32_t S_GameEntityInfo::_internal_max_hp() const {
  return _impl_.max_hp_;
}
inline uint32_t S_GameEntityInfo::max_hp() const {
  // @@protoc_insertion_point(field_get:Protocol.S_GameEntityInfo.max_hp)
  return _internal_max_hp();
}
inline void S_GameEntityInfo::_internal_set_max_hp(uint32_t value) {
  
  _impl_.max_hp_ = value;
}
inline void S_GameEntityInfo::set_max_hp(uint32_t value) {
  _internal_set_max_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.S_GameEntityInfo.max_hp)
}

// uint32 hp = 7;
inline void S_GameEntityInfo::clear_hp() {
  _impl_.hp_ = 0u;
}
inline uint32_t S_GameEntityInfo::_internal_hp() const {
  return _impl_.hp_;
}
inline uint32_t S_GameEntityInfo::hp() const {
  // @@protoc_insertion_point(field_get:Protocol.S_GameEntityInfo.hp)
  return _internal_hp();
}
inline void S_GameEntityInfo::_internal_set_hp(uint32_t value) {
  
  _impl_.hp_ = value;
}
inline void S_GameEntityInfo::set_hp(uint32_t value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.S_GameEntityInfo.hp)
}

// uint32 attack = 8;
inline void S_GameEntityInfo::clear_attack() {
  _impl_.attack_ = 0u;
}
inline uint32_t S_GameEntityInfo::_internal_attack() const {
  return _impl_.attack_;
}
inline uint32_t S_GameEntityInfo::attack() const {
  // @@protoc_insertion_point(field_get:Protocol.S_GameEntityInfo.attack)
  return _internal_attack();
}
inline void S_GameEntityInfo::_internal_set_attack(uint32_t value) {
  
  _impl_.attack_ = value;
}
inline void S_GameEntityInfo::set_attack(uint32_t value) {
  _internal_set_attack(value);
  // @@protoc_insertion_point(field_set:Protocol.S_GameEntityInfo.attack)
}

// -------------------------------------------------------------------

// S_SyncGameEntities

// repeated .Protocol.S_GameEntityInfo gameEntities = 1;
inline int S_SyncGameEntities::_internal_gameentities_size() const {
  return _impl_.gameentities_.size();
}
inline int S_SyncGameEntities::gameentities_size() const {
  return _internal_gameentities_size();
}
inline void S_SyncGameEntities::clear_gameentities() {
  _impl_.gameentities_.Clear();
}
inline ::Protocol::S_GameEntityInfo* S_SyncGameEntities::mutable_gameentities(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_SyncGameEntities.gameEntities)
  return _impl_.gameentities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_GameEntityInfo >*
S_SyncGameEntities::mutable_gameentities() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_SyncGameEntities.gameEntities)
  return &_impl_.gameentities_;
}
inline const ::Protocol::S_GameEntityInfo& S_SyncGameEntities::_internal_gameentities(int index) const {
  return _impl_.gameentities_.Get(index);
}
inline const ::Protocol::S_GameEntityInfo& S_SyncGameEntities::gameentities(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_SyncGameEntities.gameEntities)
  return _internal_gameentities(index);
}
inline ::Protocol::S_GameEntityInfo* S_SyncGameEntities::_internal_add_gameentities() {
  return _impl_.gameentities_.Add();
}
inline ::Protocol::S_GameEntityInfo* S_SyncGameEntities::add_gameentities() {
  ::Protocol::S_GameEntityInfo* _add = _internal_add_gameentities();
  // @@protoc_insertion_point(field_add:Protocol.S_SyncGameEntities.gameEntities)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::S_GameEntityInfo >&
S_SyncGameEntities::gameentities() const {
  // @@protoc_insertion_point(field_list:Protocol.S_SyncGameEntities.gameEntities)
  return _impl_.gameentities_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Packet_2eproto
