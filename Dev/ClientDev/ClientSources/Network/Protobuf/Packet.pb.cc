// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packet.proto

#include "Packet.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
PROTOBUF_CONSTEXPR S_EnterGame::S_EnterGame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_id_)*/uint64_t{0u}
  , /*decltype(_impl_.enter_success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_EnterGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_EnterGameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_EnterGameDefaultTypeInternal() {}
  union {
    S_EnterGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_EnterGameDefaultTypeInternal _S_EnterGame_default_instance_;
PROTOBUF_CONSTEXPR S_LeaveGame::S_LeaveGame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.game_player_info_)*/nullptr
  , /*decltype(_impl_.user_id_)*/uint64_t{0u}
  , /*decltype(_impl_.leave_success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_LeaveGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_LeaveGameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_LeaveGameDefaultTypeInternal() {}
  union {
    S_LeaveGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_LeaveGameDefaultTypeInternal _S_LeaveGame_default_instance_;
PROTOBUF_CONSTEXPR S_CreateLocalGamePlayer::S_CreateLocalGamePlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.game_player_info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_CreateLocalGamePlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_CreateLocalGamePlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_CreateLocalGamePlayerDefaultTypeInternal() {}
  union {
    S_CreateLocalGamePlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_CreateLocalGamePlayerDefaultTypeInternal _S_CreateLocalGamePlayer_default_instance_;
PROTOBUF_CONSTEXPR S_SyncGameEntities::S_SyncGameEntities(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.game_players_)*/{}
  , /*decltype(_impl_.game_monsters_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_SyncGameEntitiesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_SyncGameEntitiesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_SyncGameEntitiesDefaultTypeInternal() {}
  union {
    S_SyncGameEntities _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_SyncGameEntitiesDefaultTypeInternal _S_SyncGameEntities_default_instance_;
PROTOBUF_CONSTEXPR S_SyncGamePlayer::S_SyncGamePlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.game_player_info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_SyncGamePlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_SyncGamePlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_SyncGamePlayerDefaultTypeInternal() {}
  union {
    S_SyncGamePlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_SyncGamePlayerDefaultTypeInternal _S_SyncGamePlayer_default_instance_;
PROTOBUF_CONSTEXPR C_SyncGamePlayerMove::C_SyncGamePlayerMove(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.game_player_info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_SyncGamePlayerMoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_SyncGamePlayerMoveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_SyncGamePlayerMoveDefaultTypeInternal() {}
  union {
    C_SyncGamePlayerMove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_SyncGamePlayerMoveDefaultTypeInternal _C_SyncGamePlayerMove_default_instance_;
PROTOBUF_CONSTEXPR S_SyncGamePlayerMove::S_SyncGamePlayerMove(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.game_player_info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_SyncGamePlayerMoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_SyncGamePlayerMoveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_SyncGamePlayerMoveDefaultTypeInternal() {}
  union {
    S_SyncGamePlayerMove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_SyncGamePlayerMoveDefaultTypeInternal _S_SyncGamePlayerMove_default_instance_;
PROTOBUF_CONSTEXPR C_SyncGameEntityLookAtDir::C_SyncGameEntityLookAtDir(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.game_player_info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_SyncGameEntityLookAtDirDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_SyncGameEntityLookAtDirDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_SyncGameEntityLookAtDirDefaultTypeInternal() {}
  union {
    C_SyncGameEntityLookAtDir _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_SyncGameEntityLookAtDirDefaultTypeInternal _C_SyncGameEntityLookAtDir_default_instance_;
PROTOBUF_CONSTEXPR S_SyncGameEntityLookAtDir::S_SyncGameEntityLookAtDir(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.game_player_info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_SyncGameEntityLookAtDirDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_SyncGameEntityLookAtDirDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_SyncGameEntityLookAtDirDefaultTypeInternal() {}
  union {
    S_SyncGameEntityLookAtDir _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_SyncGameEntityLookAtDirDefaultTypeInternal _S_SyncGameEntityLookAtDir_default_instance_;
PROTOBUF_CONSTEXPR C_SyncGameEntityState::C_SyncGameEntityState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.game_player_info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_SyncGameEntityStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_SyncGameEntityStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_SyncGameEntityStateDefaultTypeInternal() {}
  union {
    C_SyncGameEntityState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_SyncGameEntityStateDefaultTypeInternal _C_SyncGameEntityState_default_instance_;
PROTOBUF_CONSTEXPR S_SyncGameEntityState::S_SyncGameEntityState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.game_player_info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_SyncGameEntityStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_SyncGameEntityStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_SyncGameEntityStateDefaultTypeInternal() {}
  union {
    S_SyncGameEntityState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_SyncGameEntityStateDefaultTypeInternal _S_SyncGameEntityState_default_instance_;
}  // namespace Protocol
static ::_pb::Metadata file_level_metadata_Packet_2eproto[11];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Packet_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Packet_2eproto = nullptr;

const uint32_t TableStruct_Packet_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_EnterGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_EnterGame, _impl_.enter_success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_EnterGame, _impl_.user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LeaveGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LeaveGame, _impl_.leave_success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LeaveGame, _impl_.user_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LeaveGame, _impl_.game_player_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CreateLocalGamePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CreateLocalGamePlayer, _impl_.game_player_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SyncGameEntities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SyncGameEntities, _impl_.game_players_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SyncGameEntities, _impl_.game_monsters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SyncGamePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SyncGamePlayer, _impl_.game_player_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SyncGamePlayerMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SyncGamePlayerMove, _impl_.game_player_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SyncGamePlayerMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SyncGamePlayerMove, _impl_.game_player_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SyncGameEntityLookAtDir, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SyncGameEntityLookAtDir, _impl_.game_player_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SyncGameEntityLookAtDir, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SyncGameEntityLookAtDir, _impl_.game_player_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SyncGameEntityState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_SyncGameEntityState, _impl_.game_player_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SyncGameEntityState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SyncGameEntityState, _impl_.game_player_info_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Protocol::S_EnterGame)},
  { 8, -1, -1, sizeof(::Protocol::S_LeaveGame)},
  { 17, -1, -1, sizeof(::Protocol::S_CreateLocalGamePlayer)},
  { 24, -1, -1, sizeof(::Protocol::S_SyncGameEntities)},
  { 32, -1, -1, sizeof(::Protocol::S_SyncGamePlayer)},
  { 39, -1, -1, sizeof(::Protocol::C_SyncGamePlayerMove)},
  { 46, -1, -1, sizeof(::Protocol::S_SyncGamePlayerMove)},
  { 53, -1, -1, sizeof(::Protocol::C_SyncGameEntityLookAtDir)},
  { 60, -1, -1, sizeof(::Protocol::S_SyncGameEntityLookAtDir)},
  { 67, -1, -1, sizeof(::Protocol::C_SyncGameEntityState)},
  { 74, -1, -1, sizeof(::Protocol::S_SyncGameEntityState)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Protocol::_S_EnterGame_default_instance_._instance,
  &::Protocol::_S_LeaveGame_default_instance_._instance,
  &::Protocol::_S_CreateLocalGamePlayer_default_instance_._instance,
  &::Protocol::_S_SyncGameEntities_default_instance_._instance,
  &::Protocol::_S_SyncGamePlayer_default_instance_._instance,
  &::Protocol::_C_SyncGamePlayerMove_default_instance_._instance,
  &::Protocol::_S_SyncGamePlayerMove_default_instance_._instance,
  &::Protocol::_C_SyncGameEntityLookAtDir_default_instance_._instance,
  &::Protocol::_S_SyncGameEntityLookAtDir_default_instance_._instance,
  &::Protocol::_C_SyncGameEntityState_default_instance_._instance,
  &::Protocol::_S_SyncGameEntityState_default_instance_._instance,
};

const char descriptor_table_protodef_Packet_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Packet.proto\022\010Protocol\032\nEnum.proto\032\014St"
  "ruct.proto\"5\n\013S_EnterGame\022\025\n\renter_succe"
  "ss\030\001 \001(\010\022\017\n\007user_id\030\002 \001(\004\"i\n\013S_LeaveGame"
  "\022\025\n\rleave_success\030\001 \001(\010\022\017\n\007user_id\030\002 \001(\004"
  "\0222\n\020game_player_info\030\003 \001(\0132\030.Protocol.Ga"
  "meEntityInfo\"M\n\027S_CreateLocalGamePlayer\022"
  "2\n\020game_player_info\030\001 \001(\0132\030.Protocol.Gam"
  "eEntityInfo\"v\n\022S_SyncGameEntities\022.\n\014gam"
  "e_players\030\001 \003(\0132\030.Protocol.GameEntityInf"
  "o\0220\n\rgame_monsters\030\002 \003(\0132\031.Protocol.Game"
  "MonsterInfo\"F\n\020S_SyncGamePlayer\0222\n\020game_"
  "player_info\030\001 \001(\0132\030.Protocol.GameEntityI"
  "nfo\"J\n\024C_SyncGamePlayerMove\0222\n\020game_play"
  "er_info\030\001 \001(\0132\030.Protocol.GameEntityInfo\""
  "J\n\024S_SyncGamePlayerMove\0222\n\020game_player_i"
  "nfo\030\001 \001(\0132\030.Protocol.GameEntityInfo\"O\n\031C"
  "_SyncGameEntityLookAtDir\0222\n\020game_player_"
  "info\030\001 \001(\0132\030.Protocol.GameEntityInfo\"O\n\031"
  "S_SyncGameEntityLookAtDir\0222\n\020game_player"
  "_info\030\001 \001(\0132\030.Protocol.GameEntityInfo\"K\n"
  "\025C_SyncGameEntityState\0222\n\020game_player_in"
  "fo\030\001 \001(\0132\030.Protocol.GameEntityInfo\"K\n\025S_"
  "SyncGameEntityState\0222\n\020game_player_info\030"
  "\001 \001(\0132\030.Protocol.GameEntityInfob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Packet_2eproto_deps[2] = {
  &::descriptor_table_Enum_2eproto,
  &::descriptor_table_Struct_2eproto,
};
static ::_pbi::once_flag descriptor_table_Packet_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Packet_2eproto = {
    false, false, 959, descriptor_table_protodef_Packet_2eproto,
    "Packet.proto",
    &descriptor_table_Packet_2eproto_once, descriptor_table_Packet_2eproto_deps, 2, 11,
    schemas, file_default_instances, TableStruct_Packet_2eproto::offsets,
    file_level_metadata_Packet_2eproto, file_level_enum_descriptors_Packet_2eproto,
    file_level_service_descriptors_Packet_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Packet_2eproto_getter() {
  return &descriptor_table_Packet_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Packet_2eproto(&descriptor_table_Packet_2eproto);
namespace Protocol {

// ===================================================================

class S_EnterGame::_Internal {
 public:
};

S_EnterGame::S_EnterGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_EnterGame)
}
S_EnterGame::S_EnterGame(const S_EnterGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_EnterGame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){}
    , decltype(_impl_.enter_success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.user_id_, &from._impl_.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.enter_success_) -
    reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.enter_success_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_EnterGame)
}

inline void S_EnterGame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_id_){uint64_t{0u}}
    , decltype(_impl_.enter_success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_EnterGame::~S_EnterGame() {
  // @@protoc_insertion_point(destructor:Protocol.S_EnterGame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_EnterGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_EnterGame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_EnterGame::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_EnterGame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.enter_success_) -
      reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.enter_success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_EnterGame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool enter_success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.enter_success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_EnterGame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_EnterGame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enter_success = 1;
  if (this->_internal_enter_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_enter_success(), target);
  }

  // uint64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_EnterGame)
  return target;
}

size_t S_EnterGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_EnterGame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_user_id());
  }

  // bool enter_success = 1;
  if (this->_internal_enter_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_EnterGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_EnterGame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_EnterGame::GetClassData() const { return &_class_data_; }


void S_EnterGame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_EnterGame*>(&to_msg);
  auto& from = static_cast<const S_EnterGame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_EnterGame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_enter_success() != 0) {
    _this->_internal_set_enter_success(from._internal_enter_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_EnterGame::CopyFrom(const S_EnterGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_EnterGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_EnterGame::IsInitialized() const {
  return true;
}

void S_EnterGame::InternalSwap(S_EnterGame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_EnterGame, _impl_.enter_success_)
      + sizeof(S_EnterGame::_impl_.enter_success_)
      - PROTOBUF_FIELD_OFFSET(S_EnterGame, _impl_.user_id_)>(
          reinterpret_cast<char*>(&_impl_.user_id_),
          reinterpret_cast<char*>(&other->_impl_.user_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_EnterGame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[0]);
}

// ===================================================================

class S_LeaveGame::_Internal {
 public:
  static const ::Protocol::GameEntityInfo& game_player_info(const S_LeaveGame* msg);
};

const ::Protocol::GameEntityInfo&
S_LeaveGame::_Internal::game_player_info(const S_LeaveGame* msg) {
  return *msg->_impl_.game_player_info_;
}
void S_LeaveGame::clear_game_player_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.game_player_info_ != nullptr) {
    delete _impl_.game_player_info_;
  }
  _impl_.game_player_info_ = nullptr;
}
S_LeaveGame::S_LeaveGame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_LeaveGame)
}
S_LeaveGame::S_LeaveGame(const S_LeaveGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_LeaveGame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.game_player_info_){nullptr}
    , decltype(_impl_.user_id_){}
    , decltype(_impl_.leave_success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_game_player_info()) {
    _this->_impl_.game_player_info_ = new ::Protocol::GameEntityInfo(*from._impl_.game_player_info_);
  }
  ::memcpy(&_impl_.user_id_, &from._impl_.user_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.leave_success_) -
    reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.leave_success_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_LeaveGame)
}

inline void S_LeaveGame::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.game_player_info_){nullptr}
    , decltype(_impl_.user_id_){uint64_t{0u}}
    , decltype(_impl_.leave_success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_LeaveGame::~S_LeaveGame() {
  // @@protoc_insertion_point(destructor:Protocol.S_LeaveGame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_LeaveGame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.game_player_info_;
}

void S_LeaveGame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_LeaveGame::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_LeaveGame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.game_player_info_ != nullptr) {
    delete _impl_.game_player_info_;
  }
  _impl_.game_player_info_ = nullptr;
  ::memset(&_impl_.user_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.leave_success_) -
      reinterpret_cast<char*>(&_impl_.user_id_)) + sizeof(_impl_.leave_success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_LeaveGame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool leave_success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.leave_success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.user_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.GameEntityInfo game_player_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_player_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_LeaveGame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_LeaveGame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool leave_success = 1;
  if (this->_internal_leave_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_leave_success(), target);
  }

  // uint64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_user_id(), target);
  }

  // .Protocol.GameEntityInfo game_player_info = 3;
  if (this->_internal_has_game_player_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::game_player_info(this),
        _Internal::game_player_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_LeaveGame)
  return target;
}

size_t S_LeaveGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_LeaveGame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.GameEntityInfo game_player_info = 3;
  if (this->_internal_has_game_player_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.game_player_info_);
  }

  // uint64 user_id = 2;
  if (this->_internal_user_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_user_id());
  }

  // bool leave_success = 1;
  if (this->_internal_leave_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_LeaveGame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_LeaveGame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_LeaveGame::GetClassData() const { return &_class_data_; }


void S_LeaveGame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_LeaveGame*>(&to_msg);
  auto& from = static_cast<const S_LeaveGame&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_LeaveGame)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_game_player_info()) {
    _this->_internal_mutable_game_player_info()->::Protocol::GameEntityInfo::MergeFrom(
        from._internal_game_player_info());
  }
  if (from._internal_user_id() != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_leave_success() != 0) {
    _this->_internal_set_leave_success(from._internal_leave_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_LeaveGame::CopyFrom(const S_LeaveGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_LeaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_LeaveGame::IsInitialized() const {
  return true;
}

void S_LeaveGame::InternalSwap(S_LeaveGame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_LeaveGame, _impl_.leave_success_)
      + sizeof(S_LeaveGame::_impl_.leave_success_)
      - PROTOBUF_FIELD_OFFSET(S_LeaveGame, _impl_.game_player_info_)>(
          reinterpret_cast<char*>(&_impl_.game_player_info_),
          reinterpret_cast<char*>(&other->_impl_.game_player_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_LeaveGame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[1]);
}

// ===================================================================

class S_CreateLocalGamePlayer::_Internal {
 public:
  static const ::Protocol::GameEntityInfo& game_player_info(const S_CreateLocalGamePlayer* msg);
};

const ::Protocol::GameEntityInfo&
S_CreateLocalGamePlayer::_Internal::game_player_info(const S_CreateLocalGamePlayer* msg) {
  return *msg->_impl_.game_player_info_;
}
void S_CreateLocalGamePlayer::clear_game_player_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.game_player_info_ != nullptr) {
    delete _impl_.game_player_info_;
  }
  _impl_.game_player_info_ = nullptr;
}
S_CreateLocalGamePlayer::S_CreateLocalGamePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_CreateLocalGamePlayer)
}
S_CreateLocalGamePlayer::S_CreateLocalGamePlayer(const S_CreateLocalGamePlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_CreateLocalGamePlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.game_player_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_game_player_info()) {
    _this->_impl_.game_player_info_ = new ::Protocol::GameEntityInfo(*from._impl_.game_player_info_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_CreateLocalGamePlayer)
}

inline void S_CreateLocalGamePlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.game_player_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_CreateLocalGamePlayer::~S_CreateLocalGamePlayer() {
  // @@protoc_insertion_point(destructor:Protocol.S_CreateLocalGamePlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_CreateLocalGamePlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.game_player_info_;
}

void S_CreateLocalGamePlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_CreateLocalGamePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_CreateLocalGamePlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.game_player_info_ != nullptr) {
    delete _impl_.game_player_info_;
  }
  _impl_.game_player_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CreateLocalGamePlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.GameEntityInfo game_player_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_player_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_CreateLocalGamePlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_CreateLocalGamePlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.GameEntityInfo game_player_info = 1;
  if (this->_internal_has_game_player_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::game_player_info(this),
        _Internal::game_player_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_CreateLocalGamePlayer)
  return target;
}

size_t S_CreateLocalGamePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_CreateLocalGamePlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.GameEntityInfo game_player_info = 1;
  if (this->_internal_has_game_player_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.game_player_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_CreateLocalGamePlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_CreateLocalGamePlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_CreateLocalGamePlayer::GetClassData() const { return &_class_data_; }


void S_CreateLocalGamePlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_CreateLocalGamePlayer*>(&to_msg);
  auto& from = static_cast<const S_CreateLocalGamePlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_CreateLocalGamePlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_game_player_info()) {
    _this->_internal_mutable_game_player_info()->::Protocol::GameEntityInfo::MergeFrom(
        from._internal_game_player_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_CreateLocalGamePlayer::CopyFrom(const S_CreateLocalGamePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_CreateLocalGamePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CreateLocalGamePlayer::IsInitialized() const {
  return true;
}

void S_CreateLocalGamePlayer::InternalSwap(S_CreateLocalGamePlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.game_player_info_, other->_impl_.game_player_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CreateLocalGamePlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[2]);
}

// ===================================================================

class S_SyncGameEntities::_Internal {
 public:
};

void S_SyncGameEntities::clear_game_players() {
  _impl_.game_players_.Clear();
}
void S_SyncGameEntities::clear_game_monsters() {
  _impl_.game_monsters_.Clear();
}
S_SyncGameEntities::S_SyncGameEntities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_SyncGameEntities)
}
S_SyncGameEntities::S_SyncGameEntities(const S_SyncGameEntities& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_SyncGameEntities* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.game_players_){from._impl_.game_players_}
    , decltype(_impl_.game_monsters_){from._impl_.game_monsters_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_SyncGameEntities)
}

inline void S_SyncGameEntities::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.game_players_){arena}
    , decltype(_impl_.game_monsters_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_SyncGameEntities::~S_SyncGameEntities() {
  // @@protoc_insertion_point(destructor:Protocol.S_SyncGameEntities)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_SyncGameEntities::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.game_players_.~RepeatedPtrField();
  _impl_.game_monsters_.~RepeatedPtrField();
}

void S_SyncGameEntities::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_SyncGameEntities::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_SyncGameEntities)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.game_players_.Clear();
  _impl_.game_monsters_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SyncGameEntities::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.GameEntityInfo game_players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_game_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Protocol.GameMonsterInfo game_monsters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_game_monsters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_SyncGameEntities::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_SyncGameEntities)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.GameEntityInfo game_players = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_game_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_game_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .Protocol.GameMonsterInfo game_monsters = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_game_monsters_size()); i < n; i++) {
    const auto& repfield = this->_internal_game_monsters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_SyncGameEntities)
  return target;
}

size_t S_SyncGameEntities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_SyncGameEntities)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.GameEntityInfo game_players = 1;
  total_size += 1UL * this->_internal_game_players_size();
  for (const auto& msg : this->_impl_.game_players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Protocol.GameMonsterInfo game_monsters = 2;
  total_size += 1UL * this->_internal_game_monsters_size();
  for (const auto& msg : this->_impl_.game_monsters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_SyncGameEntities::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_SyncGameEntities::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_SyncGameEntities::GetClassData() const { return &_class_data_; }


void S_SyncGameEntities::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_SyncGameEntities*>(&to_msg);
  auto& from = static_cast<const S_SyncGameEntities&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_SyncGameEntities)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.game_players_.MergeFrom(from._impl_.game_players_);
  _this->_impl_.game_monsters_.MergeFrom(from._impl_.game_monsters_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_SyncGameEntities::CopyFrom(const S_SyncGameEntities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_SyncGameEntities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SyncGameEntities::IsInitialized() const {
  return true;
}

void S_SyncGameEntities::InternalSwap(S_SyncGameEntities* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.game_players_.InternalSwap(&other->_impl_.game_players_);
  _impl_.game_monsters_.InternalSwap(&other->_impl_.game_monsters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SyncGameEntities::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[3]);
}

// ===================================================================

class S_SyncGamePlayer::_Internal {
 public:
  static const ::Protocol::GameEntityInfo& game_player_info(const S_SyncGamePlayer* msg);
};

const ::Protocol::GameEntityInfo&
S_SyncGamePlayer::_Internal::game_player_info(const S_SyncGamePlayer* msg) {
  return *msg->_impl_.game_player_info_;
}
void S_SyncGamePlayer::clear_game_player_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.game_player_info_ != nullptr) {
    delete _impl_.game_player_info_;
  }
  _impl_.game_player_info_ = nullptr;
}
S_SyncGamePlayer::S_SyncGamePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_SyncGamePlayer)
}
S_SyncGamePlayer::S_SyncGamePlayer(const S_SyncGamePlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_SyncGamePlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.game_player_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_game_player_info()) {
    _this->_impl_.game_player_info_ = new ::Protocol::GameEntityInfo(*from._impl_.game_player_info_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_SyncGamePlayer)
}

inline void S_SyncGamePlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.game_player_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_SyncGamePlayer::~S_SyncGamePlayer() {
  // @@protoc_insertion_point(destructor:Protocol.S_SyncGamePlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_SyncGamePlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.game_player_info_;
}

void S_SyncGamePlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_SyncGamePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_SyncGamePlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.game_player_info_ != nullptr) {
    delete _impl_.game_player_info_;
  }
  _impl_.game_player_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SyncGamePlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.GameEntityInfo game_player_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_player_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_SyncGamePlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_SyncGamePlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.GameEntityInfo game_player_info = 1;
  if (this->_internal_has_game_player_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::game_player_info(this),
        _Internal::game_player_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_SyncGamePlayer)
  return target;
}

size_t S_SyncGamePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_SyncGamePlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.GameEntityInfo game_player_info = 1;
  if (this->_internal_has_game_player_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.game_player_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_SyncGamePlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_SyncGamePlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_SyncGamePlayer::GetClassData() const { return &_class_data_; }


void S_SyncGamePlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_SyncGamePlayer*>(&to_msg);
  auto& from = static_cast<const S_SyncGamePlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_SyncGamePlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_game_player_info()) {
    _this->_internal_mutable_game_player_info()->::Protocol::GameEntityInfo::MergeFrom(
        from._internal_game_player_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_SyncGamePlayer::CopyFrom(const S_SyncGamePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_SyncGamePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SyncGamePlayer::IsInitialized() const {
  return true;
}

void S_SyncGamePlayer::InternalSwap(S_SyncGamePlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.game_player_info_, other->_impl_.game_player_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SyncGamePlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[4]);
}

// ===================================================================

class C_SyncGamePlayerMove::_Internal {
 public:
  static const ::Protocol::GameEntityInfo& game_player_info(const C_SyncGamePlayerMove* msg);
};

const ::Protocol::GameEntityInfo&
C_SyncGamePlayerMove::_Internal::game_player_info(const C_SyncGamePlayerMove* msg) {
  return *msg->_impl_.game_player_info_;
}
void C_SyncGamePlayerMove::clear_game_player_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.game_player_info_ != nullptr) {
    delete _impl_.game_player_info_;
  }
  _impl_.game_player_info_ = nullptr;
}
C_SyncGamePlayerMove::C_SyncGamePlayerMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_SyncGamePlayerMove)
}
C_SyncGamePlayerMove::C_SyncGamePlayerMove(const C_SyncGamePlayerMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_SyncGamePlayerMove* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.game_player_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_game_player_info()) {
    _this->_impl_.game_player_info_ = new ::Protocol::GameEntityInfo(*from._impl_.game_player_info_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_SyncGamePlayerMove)
}

inline void C_SyncGamePlayerMove::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.game_player_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_SyncGamePlayerMove::~C_SyncGamePlayerMove() {
  // @@protoc_insertion_point(destructor:Protocol.C_SyncGamePlayerMove)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_SyncGamePlayerMove::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.game_player_info_;
}

void C_SyncGamePlayerMove::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_SyncGamePlayerMove::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_SyncGamePlayerMove)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.game_player_info_ != nullptr) {
    delete _impl_.game_player_info_;
  }
  _impl_.game_player_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_SyncGamePlayerMove::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.GameEntityInfo game_player_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_player_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_SyncGamePlayerMove::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_SyncGamePlayerMove)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.GameEntityInfo game_player_info = 1;
  if (this->_internal_has_game_player_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::game_player_info(this),
        _Internal::game_player_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_SyncGamePlayerMove)
  return target;
}

size_t C_SyncGamePlayerMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_SyncGamePlayerMove)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.GameEntityInfo game_player_info = 1;
  if (this->_internal_has_game_player_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.game_player_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_SyncGamePlayerMove::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_SyncGamePlayerMove::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_SyncGamePlayerMove::GetClassData() const { return &_class_data_; }


void C_SyncGamePlayerMove::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_SyncGamePlayerMove*>(&to_msg);
  auto& from = static_cast<const C_SyncGamePlayerMove&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_SyncGamePlayerMove)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_game_player_info()) {
    _this->_internal_mutable_game_player_info()->::Protocol::GameEntityInfo::MergeFrom(
        from._internal_game_player_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_SyncGamePlayerMove::CopyFrom(const C_SyncGamePlayerMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_SyncGamePlayerMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_SyncGamePlayerMove::IsInitialized() const {
  return true;
}

void C_SyncGamePlayerMove::InternalSwap(C_SyncGamePlayerMove* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.game_player_info_, other->_impl_.game_player_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_SyncGamePlayerMove::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[5]);
}

// ===================================================================

class S_SyncGamePlayerMove::_Internal {
 public:
  static const ::Protocol::GameEntityInfo& game_player_info(const S_SyncGamePlayerMove* msg);
};

const ::Protocol::GameEntityInfo&
S_SyncGamePlayerMove::_Internal::game_player_info(const S_SyncGamePlayerMove* msg) {
  return *msg->_impl_.game_player_info_;
}
void S_SyncGamePlayerMove::clear_game_player_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.game_player_info_ != nullptr) {
    delete _impl_.game_player_info_;
  }
  _impl_.game_player_info_ = nullptr;
}
S_SyncGamePlayerMove::S_SyncGamePlayerMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_SyncGamePlayerMove)
}
S_SyncGamePlayerMove::S_SyncGamePlayerMove(const S_SyncGamePlayerMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_SyncGamePlayerMove* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.game_player_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_game_player_info()) {
    _this->_impl_.game_player_info_ = new ::Protocol::GameEntityInfo(*from._impl_.game_player_info_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_SyncGamePlayerMove)
}

inline void S_SyncGamePlayerMove::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.game_player_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_SyncGamePlayerMove::~S_SyncGamePlayerMove() {
  // @@protoc_insertion_point(destructor:Protocol.S_SyncGamePlayerMove)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_SyncGamePlayerMove::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.game_player_info_;
}

void S_SyncGamePlayerMove::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_SyncGamePlayerMove::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_SyncGamePlayerMove)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.game_player_info_ != nullptr) {
    delete _impl_.game_player_info_;
  }
  _impl_.game_player_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SyncGamePlayerMove::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.GameEntityInfo game_player_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_player_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_SyncGamePlayerMove::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_SyncGamePlayerMove)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.GameEntityInfo game_player_info = 1;
  if (this->_internal_has_game_player_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::game_player_info(this),
        _Internal::game_player_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_SyncGamePlayerMove)
  return target;
}

size_t S_SyncGamePlayerMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_SyncGamePlayerMove)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.GameEntityInfo game_player_info = 1;
  if (this->_internal_has_game_player_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.game_player_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_SyncGamePlayerMove::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_SyncGamePlayerMove::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_SyncGamePlayerMove::GetClassData() const { return &_class_data_; }


void S_SyncGamePlayerMove::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_SyncGamePlayerMove*>(&to_msg);
  auto& from = static_cast<const S_SyncGamePlayerMove&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_SyncGamePlayerMove)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_game_player_info()) {
    _this->_internal_mutable_game_player_info()->::Protocol::GameEntityInfo::MergeFrom(
        from._internal_game_player_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_SyncGamePlayerMove::CopyFrom(const S_SyncGamePlayerMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_SyncGamePlayerMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SyncGamePlayerMove::IsInitialized() const {
  return true;
}

void S_SyncGamePlayerMove::InternalSwap(S_SyncGamePlayerMove* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.game_player_info_, other->_impl_.game_player_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SyncGamePlayerMove::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[6]);
}

// ===================================================================

class C_SyncGameEntityLookAtDir::_Internal {
 public:
  static const ::Protocol::GameEntityInfo& game_player_info(const C_SyncGameEntityLookAtDir* msg);
};

const ::Protocol::GameEntityInfo&
C_SyncGameEntityLookAtDir::_Internal::game_player_info(const C_SyncGameEntityLookAtDir* msg) {
  return *msg->_impl_.game_player_info_;
}
void C_SyncGameEntityLookAtDir::clear_game_player_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.game_player_info_ != nullptr) {
    delete _impl_.game_player_info_;
  }
  _impl_.game_player_info_ = nullptr;
}
C_SyncGameEntityLookAtDir::C_SyncGameEntityLookAtDir(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_SyncGameEntityLookAtDir)
}
C_SyncGameEntityLookAtDir::C_SyncGameEntityLookAtDir(const C_SyncGameEntityLookAtDir& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_SyncGameEntityLookAtDir* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.game_player_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_game_player_info()) {
    _this->_impl_.game_player_info_ = new ::Protocol::GameEntityInfo(*from._impl_.game_player_info_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_SyncGameEntityLookAtDir)
}

inline void C_SyncGameEntityLookAtDir::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.game_player_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_SyncGameEntityLookAtDir::~C_SyncGameEntityLookAtDir() {
  // @@protoc_insertion_point(destructor:Protocol.C_SyncGameEntityLookAtDir)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_SyncGameEntityLookAtDir::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.game_player_info_;
}

void C_SyncGameEntityLookAtDir::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_SyncGameEntityLookAtDir::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_SyncGameEntityLookAtDir)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.game_player_info_ != nullptr) {
    delete _impl_.game_player_info_;
  }
  _impl_.game_player_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_SyncGameEntityLookAtDir::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.GameEntityInfo game_player_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_player_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_SyncGameEntityLookAtDir::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_SyncGameEntityLookAtDir)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.GameEntityInfo game_player_info = 1;
  if (this->_internal_has_game_player_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::game_player_info(this),
        _Internal::game_player_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_SyncGameEntityLookAtDir)
  return target;
}

size_t C_SyncGameEntityLookAtDir::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_SyncGameEntityLookAtDir)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.GameEntityInfo game_player_info = 1;
  if (this->_internal_has_game_player_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.game_player_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_SyncGameEntityLookAtDir::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_SyncGameEntityLookAtDir::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_SyncGameEntityLookAtDir::GetClassData() const { return &_class_data_; }


void C_SyncGameEntityLookAtDir::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_SyncGameEntityLookAtDir*>(&to_msg);
  auto& from = static_cast<const C_SyncGameEntityLookAtDir&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_SyncGameEntityLookAtDir)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_game_player_info()) {
    _this->_internal_mutable_game_player_info()->::Protocol::GameEntityInfo::MergeFrom(
        from._internal_game_player_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_SyncGameEntityLookAtDir::CopyFrom(const C_SyncGameEntityLookAtDir& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_SyncGameEntityLookAtDir)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_SyncGameEntityLookAtDir::IsInitialized() const {
  return true;
}

void C_SyncGameEntityLookAtDir::InternalSwap(C_SyncGameEntityLookAtDir* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.game_player_info_, other->_impl_.game_player_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_SyncGameEntityLookAtDir::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[7]);
}

// ===================================================================

class S_SyncGameEntityLookAtDir::_Internal {
 public:
  static const ::Protocol::GameEntityInfo& game_player_info(const S_SyncGameEntityLookAtDir* msg);
};

const ::Protocol::GameEntityInfo&
S_SyncGameEntityLookAtDir::_Internal::game_player_info(const S_SyncGameEntityLookAtDir* msg) {
  return *msg->_impl_.game_player_info_;
}
void S_SyncGameEntityLookAtDir::clear_game_player_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.game_player_info_ != nullptr) {
    delete _impl_.game_player_info_;
  }
  _impl_.game_player_info_ = nullptr;
}
S_SyncGameEntityLookAtDir::S_SyncGameEntityLookAtDir(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_SyncGameEntityLookAtDir)
}
S_SyncGameEntityLookAtDir::S_SyncGameEntityLookAtDir(const S_SyncGameEntityLookAtDir& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_SyncGameEntityLookAtDir* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.game_player_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_game_player_info()) {
    _this->_impl_.game_player_info_ = new ::Protocol::GameEntityInfo(*from._impl_.game_player_info_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_SyncGameEntityLookAtDir)
}

inline void S_SyncGameEntityLookAtDir::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.game_player_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_SyncGameEntityLookAtDir::~S_SyncGameEntityLookAtDir() {
  // @@protoc_insertion_point(destructor:Protocol.S_SyncGameEntityLookAtDir)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_SyncGameEntityLookAtDir::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.game_player_info_;
}

void S_SyncGameEntityLookAtDir::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_SyncGameEntityLookAtDir::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_SyncGameEntityLookAtDir)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.game_player_info_ != nullptr) {
    delete _impl_.game_player_info_;
  }
  _impl_.game_player_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SyncGameEntityLookAtDir::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.GameEntityInfo game_player_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_player_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_SyncGameEntityLookAtDir::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_SyncGameEntityLookAtDir)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.GameEntityInfo game_player_info = 1;
  if (this->_internal_has_game_player_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::game_player_info(this),
        _Internal::game_player_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_SyncGameEntityLookAtDir)
  return target;
}

size_t S_SyncGameEntityLookAtDir::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_SyncGameEntityLookAtDir)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.GameEntityInfo game_player_info = 1;
  if (this->_internal_has_game_player_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.game_player_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_SyncGameEntityLookAtDir::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_SyncGameEntityLookAtDir::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_SyncGameEntityLookAtDir::GetClassData() const { return &_class_data_; }


void S_SyncGameEntityLookAtDir::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_SyncGameEntityLookAtDir*>(&to_msg);
  auto& from = static_cast<const S_SyncGameEntityLookAtDir&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_SyncGameEntityLookAtDir)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_game_player_info()) {
    _this->_internal_mutable_game_player_info()->::Protocol::GameEntityInfo::MergeFrom(
        from._internal_game_player_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_SyncGameEntityLookAtDir::CopyFrom(const S_SyncGameEntityLookAtDir& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_SyncGameEntityLookAtDir)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SyncGameEntityLookAtDir::IsInitialized() const {
  return true;
}

void S_SyncGameEntityLookAtDir::InternalSwap(S_SyncGameEntityLookAtDir* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.game_player_info_, other->_impl_.game_player_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SyncGameEntityLookAtDir::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[8]);
}

// ===================================================================

class C_SyncGameEntityState::_Internal {
 public:
  static const ::Protocol::GameEntityInfo& game_player_info(const C_SyncGameEntityState* msg);
};

const ::Protocol::GameEntityInfo&
C_SyncGameEntityState::_Internal::game_player_info(const C_SyncGameEntityState* msg) {
  return *msg->_impl_.game_player_info_;
}
void C_SyncGameEntityState::clear_game_player_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.game_player_info_ != nullptr) {
    delete _impl_.game_player_info_;
  }
  _impl_.game_player_info_ = nullptr;
}
C_SyncGameEntityState::C_SyncGameEntityState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_SyncGameEntityState)
}
C_SyncGameEntityState::C_SyncGameEntityState(const C_SyncGameEntityState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_SyncGameEntityState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.game_player_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_game_player_info()) {
    _this->_impl_.game_player_info_ = new ::Protocol::GameEntityInfo(*from._impl_.game_player_info_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_SyncGameEntityState)
}

inline void C_SyncGameEntityState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.game_player_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_SyncGameEntityState::~C_SyncGameEntityState() {
  // @@protoc_insertion_point(destructor:Protocol.C_SyncGameEntityState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_SyncGameEntityState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.game_player_info_;
}

void C_SyncGameEntityState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_SyncGameEntityState::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_SyncGameEntityState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.game_player_info_ != nullptr) {
    delete _impl_.game_player_info_;
  }
  _impl_.game_player_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_SyncGameEntityState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.GameEntityInfo game_player_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_player_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_SyncGameEntityState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_SyncGameEntityState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.GameEntityInfo game_player_info = 1;
  if (this->_internal_has_game_player_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::game_player_info(this),
        _Internal::game_player_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_SyncGameEntityState)
  return target;
}

size_t C_SyncGameEntityState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_SyncGameEntityState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.GameEntityInfo game_player_info = 1;
  if (this->_internal_has_game_player_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.game_player_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_SyncGameEntityState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_SyncGameEntityState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_SyncGameEntityState::GetClassData() const { return &_class_data_; }


void C_SyncGameEntityState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_SyncGameEntityState*>(&to_msg);
  auto& from = static_cast<const C_SyncGameEntityState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_SyncGameEntityState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_game_player_info()) {
    _this->_internal_mutable_game_player_info()->::Protocol::GameEntityInfo::MergeFrom(
        from._internal_game_player_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_SyncGameEntityState::CopyFrom(const C_SyncGameEntityState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_SyncGameEntityState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_SyncGameEntityState::IsInitialized() const {
  return true;
}

void C_SyncGameEntityState::InternalSwap(C_SyncGameEntityState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.game_player_info_, other->_impl_.game_player_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_SyncGameEntityState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[9]);
}

// ===================================================================

class S_SyncGameEntityState::_Internal {
 public:
  static const ::Protocol::GameEntityInfo& game_player_info(const S_SyncGameEntityState* msg);
};

const ::Protocol::GameEntityInfo&
S_SyncGameEntityState::_Internal::game_player_info(const S_SyncGameEntityState* msg) {
  return *msg->_impl_.game_player_info_;
}
void S_SyncGameEntityState::clear_game_player_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.game_player_info_ != nullptr) {
    delete _impl_.game_player_info_;
  }
  _impl_.game_player_info_ = nullptr;
}
S_SyncGameEntityState::S_SyncGameEntityState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_SyncGameEntityState)
}
S_SyncGameEntityState::S_SyncGameEntityState(const S_SyncGameEntityState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_SyncGameEntityState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.game_player_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_game_player_info()) {
    _this->_impl_.game_player_info_ = new ::Protocol::GameEntityInfo(*from._impl_.game_player_info_);
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_SyncGameEntityState)
}

inline void S_SyncGameEntityState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.game_player_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_SyncGameEntityState::~S_SyncGameEntityState() {
  // @@protoc_insertion_point(destructor:Protocol.S_SyncGameEntityState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_SyncGameEntityState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.game_player_info_;
}

void S_SyncGameEntityState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_SyncGameEntityState::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_SyncGameEntityState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.game_player_info_ != nullptr) {
    delete _impl_.game_player_info_;
  }
  _impl_.game_player_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SyncGameEntityState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.GameEntityInfo game_player_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_player_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_SyncGameEntityState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_SyncGameEntityState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.GameEntityInfo game_player_info = 1;
  if (this->_internal_has_game_player_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::game_player_info(this),
        _Internal::game_player_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_SyncGameEntityState)
  return target;
}

size_t S_SyncGameEntityState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_SyncGameEntityState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.GameEntityInfo game_player_info = 1;
  if (this->_internal_has_game_player_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.game_player_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_SyncGameEntityState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_SyncGameEntityState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_SyncGameEntityState::GetClassData() const { return &_class_data_; }


void S_SyncGameEntityState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_SyncGameEntityState*>(&to_msg);
  auto& from = static_cast<const S_SyncGameEntityState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_SyncGameEntityState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_game_player_info()) {
    _this->_internal_mutable_game_player_info()->::Protocol::GameEntityInfo::MergeFrom(
        from._internal_game_player_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_SyncGameEntityState::CopyFrom(const S_SyncGameEntityState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_SyncGameEntityState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SyncGameEntityState::IsInitialized() const {
  return true;
}

void S_SyncGameEntityState::InternalSwap(S_SyncGameEntityState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.game_player_info_, other->_impl_.game_player_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SyncGameEntityState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Packet_2eproto_getter, &descriptor_table_Packet_2eproto_once,
      file_level_metadata_Packet_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::S_EnterGame*
Arena::CreateMaybeMessage< ::Protocol::S_EnterGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_EnterGame >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_LeaveGame*
Arena::CreateMaybeMessage< ::Protocol::S_LeaveGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_LeaveGame >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_CreateLocalGamePlayer*
Arena::CreateMaybeMessage< ::Protocol::S_CreateLocalGamePlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_CreateLocalGamePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_SyncGameEntities*
Arena::CreateMaybeMessage< ::Protocol::S_SyncGameEntities >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_SyncGameEntities >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_SyncGamePlayer*
Arena::CreateMaybeMessage< ::Protocol::S_SyncGamePlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_SyncGamePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_SyncGamePlayerMove*
Arena::CreateMaybeMessage< ::Protocol::C_SyncGamePlayerMove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_SyncGamePlayerMove >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_SyncGamePlayerMove*
Arena::CreateMaybeMessage< ::Protocol::S_SyncGamePlayerMove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_SyncGamePlayerMove >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_SyncGameEntityLookAtDir*
Arena::CreateMaybeMessage< ::Protocol::C_SyncGameEntityLookAtDir >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_SyncGameEntityLookAtDir >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_SyncGameEntityLookAtDir*
Arena::CreateMaybeMessage< ::Protocol::S_SyncGameEntityLookAtDir >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_SyncGameEntityLookAtDir >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_SyncGameEntityState*
Arena::CreateMaybeMessage< ::Protocol::C_SyncGameEntityState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_SyncGameEntityState >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_SyncGameEntityState*
Arena::CreateMaybeMessage< ::Protocol::S_SyncGameEntityState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_SyncGameEntityState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
