// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto

#include "Struct.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
PROTOBUF_CONSTEXPR NetworkEntityInfo::NetworkEntityInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entity_id_)*/uint64_t{0u}
  , /*decltype(_impl_.cell_pos_x_)*/0u
  , /*decltype(_impl_.cell_pos_y_)*/0u
  , /*decltype(_impl_.max_hp_)*/0
  , /*decltype(_impl_.hp_)*/0
  , /*decltype(_impl_.attack_)*/0u
  , /*decltype(_impl_.defense_)*/0u
  , /*decltype(_impl_.entity_type_)*/0
  , /*decltype(_impl_.entitye_look_at_dir_)*/0
  , /*decltype(_impl_.entity_state_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NetworkEntityInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetworkEntityInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetworkEntityInfoDefaultTypeInternal() {}
  union {
    NetworkEntityInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetworkEntityInfoDefaultTypeInternal _NetworkEntityInfo_default_instance_;
PROTOBUF_CONSTEXPR NetworkMonsterInfo::NetworkMonsterInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.monster_info_)*/nullptr
  , /*decltype(_impl_.monster_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NetworkMonsterInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetworkMonsterInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetworkMonsterInfoDefaultTypeInternal() {}
  union {
    NetworkMonsterInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetworkMonsterInfoDefaultTypeInternal _NetworkMonsterInfo_default_instance_;
}  // namespace Protocol
static ::_pb::Metadata file_level_metadata_Struct_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Struct_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Struct_2eproto = nullptr;

const uint32_t TableStruct_Struct_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::NetworkEntityInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::NetworkEntityInfo, _impl_.entity_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::NetworkEntityInfo, _impl_.cell_pos_x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::NetworkEntityInfo, _impl_.cell_pos_y_),
  PROTOBUF_FIELD_OFFSET(::Protocol::NetworkEntityInfo, _impl_.max_hp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::NetworkEntityInfo, _impl_.hp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::NetworkEntityInfo, _impl_.attack_),
  PROTOBUF_FIELD_OFFSET(::Protocol::NetworkEntityInfo, _impl_.defense_),
  PROTOBUF_FIELD_OFFSET(::Protocol::NetworkEntityInfo, _impl_.entity_type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::NetworkEntityInfo, _impl_.entitye_look_at_dir_),
  PROTOBUF_FIELD_OFFSET(::Protocol::NetworkEntityInfo, _impl_.entity_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::NetworkMonsterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::NetworkMonsterInfo, _impl_.monster_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::NetworkMonsterInfo, _impl_.monster_info_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Protocol::NetworkEntityInfo)},
  { 16, -1, -1, sizeof(::Protocol::NetworkMonsterInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Protocol::_NetworkEntityInfo_default_instance_._instance,
  &::Protocol::_NetworkMonsterInfo_default_instance_._instance,
};

const char descriptor_table_protodef_Struct_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Struct.proto\022\010Protocol\032\nEnum.proto\"\271\002\n"
  "\021NetworkEntityInfo\022\021\n\tentity_id\030\001 \001(\004\022\022\n"
  "\ncell_pos_x\030\002 \001(\r\022\022\n\ncell_pos_y\030\003 \001(\r\022\016\n"
  "\006max_hp\030\004 \001(\005\022\n\n\002hp\030\005 \001(\005\022\016\n\006attack\030\006 \001("
  "\r\022\017\n\007defense\030\007 \001(\r\0221\n\013entity_type\030\010 \001(\0162"
  "\034.Protocol.ENetworkEntityType\022D\n\023entitye"
  "_look_at_dir\030\t \001(\0162\'.Protocol.ENetworkEn"
  "tityLookAtDirection\0223\n\014entity_state\030\n \001("
  "\0162\035.Protocol.ENetworkEntityState\"[\n\022Netw"
  "orkMonsterInfo\022\022\n\nmonster_id\030\001 \001(\r\0221\n\014mo"
  "nster_info\030\002 \001(\0132\033.Protocol.NetworkEntit"
  "yInfob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Struct_2eproto_deps[1] = {
  &::descriptor_table_Enum_2eproto,
};
static ::_pbi::once_flag descriptor_table_Struct_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Struct_2eproto = {
    false, false, 453, descriptor_table_protodef_Struct_2eproto,
    "Struct.proto",
    &descriptor_table_Struct_2eproto_once, descriptor_table_Struct_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_Struct_2eproto::offsets,
    file_level_metadata_Struct_2eproto, file_level_enum_descriptors_Struct_2eproto,
    file_level_service_descriptors_Struct_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Struct_2eproto_getter() {
  return &descriptor_table_Struct_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Struct_2eproto(&descriptor_table_Struct_2eproto);
namespace Protocol {

// ===================================================================

class NetworkEntityInfo::_Internal {
 public:
};

NetworkEntityInfo::NetworkEntityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.NetworkEntityInfo)
}
NetworkEntityInfo::NetworkEntityInfo(const NetworkEntityInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetworkEntityInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entity_id_){}
    , decltype(_impl_.cell_pos_x_){}
    , decltype(_impl_.cell_pos_y_){}
    , decltype(_impl_.max_hp_){}
    , decltype(_impl_.hp_){}
    , decltype(_impl_.attack_){}
    , decltype(_impl_.defense_){}
    , decltype(_impl_.entity_type_){}
    , decltype(_impl_.entitye_look_at_dir_){}
    , decltype(_impl_.entity_state_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.entity_id_, &from._impl_.entity_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.entity_state_) -
    reinterpret_cast<char*>(&_impl_.entity_id_)) + sizeof(_impl_.entity_state_));
  // @@protoc_insertion_point(copy_constructor:Protocol.NetworkEntityInfo)
}

inline void NetworkEntityInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entity_id_){uint64_t{0u}}
    , decltype(_impl_.cell_pos_x_){0u}
    , decltype(_impl_.cell_pos_y_){0u}
    , decltype(_impl_.max_hp_){0}
    , decltype(_impl_.hp_){0}
    , decltype(_impl_.attack_){0u}
    , decltype(_impl_.defense_){0u}
    , decltype(_impl_.entity_type_){0}
    , decltype(_impl_.entitye_look_at_dir_){0}
    , decltype(_impl_.entity_state_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NetworkEntityInfo::~NetworkEntityInfo() {
  // @@protoc_insertion_point(destructor:Protocol.NetworkEntityInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetworkEntityInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NetworkEntityInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetworkEntityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.NetworkEntityInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.entity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.entity_state_) -
      reinterpret_cast<char*>(&_impl_.entity_id_)) + sizeof(_impl_.entity_state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkEntityInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 entity_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.entity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cell_pos_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.cell_pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 cell_pos_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.cell_pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_hp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.max_hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 attack = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.attack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 defense = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.defense_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.ENetworkEntityType entity_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_entity_type(static_cast<::Protocol::ENetworkEntityType>(val));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.ENetworkEntityLookAtDirection entitye_look_at_dir = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_entitye_look_at_dir(static_cast<::Protocol::ENetworkEntityLookAtDirection>(val));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.ENetworkEntityState entity_state = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_entity_state(static_cast<::Protocol::ENetworkEntityState>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetworkEntityInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.NetworkEntityInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 entity_id = 1;
  if (this->_internal_entity_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_entity_id(), target);
  }

  // uint32 cell_pos_x = 2;
  if (this->_internal_cell_pos_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cell_pos_x(), target);
  }

  // uint32 cell_pos_y = 3;
  if (this->_internal_cell_pos_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_cell_pos_y(), target);
  }

  // int32 max_hp = 4;
  if (this->_internal_max_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_hp(), target);
  }

  // int32 hp = 5;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_hp(), target);
  }

  // uint32 attack = 6;
  if (this->_internal_attack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_attack(), target);
  }

  // uint32 defense = 7;
  if (this->_internal_defense() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_defense(), target);
  }

  // .Protocol.ENetworkEntityType entity_type = 8;
  if (this->_internal_entity_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_entity_type(), target);
  }

  // .Protocol.ENetworkEntityLookAtDirection entitye_look_at_dir = 9;
  if (this->_internal_entitye_look_at_dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_entitye_look_at_dir(), target);
  }

  // .Protocol.ENetworkEntityState entity_state = 10;
  if (this->_internal_entity_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_entity_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.NetworkEntityInfo)
  return target;
}

size_t NetworkEntityInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.NetworkEntityInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 entity_id = 1;
  if (this->_internal_entity_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_entity_id());
  }

  // uint32 cell_pos_x = 2;
  if (this->_internal_cell_pos_x() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cell_pos_x());
  }

  // uint32 cell_pos_y = 3;
  if (this->_internal_cell_pos_y() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cell_pos_y());
  }

  // int32 max_hp = 4;
  if (this->_internal_max_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_hp());
  }

  // int32 hp = 5;
  if (this->_internal_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hp());
  }

  // uint32 attack = 6;
  if (this->_internal_attack() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attack());
  }

  // uint32 defense = 7;
  if (this->_internal_defense() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_defense());
  }

  // .Protocol.ENetworkEntityType entity_type = 8;
  if (this->_internal_entity_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_entity_type());
  }

  // .Protocol.ENetworkEntityLookAtDirection entitye_look_at_dir = 9;
  if (this->_internal_entitye_look_at_dir() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_entitye_look_at_dir());
  }

  // .Protocol.ENetworkEntityState entity_state = 10;
  if (this->_internal_entity_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_entity_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetworkEntityInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetworkEntityInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetworkEntityInfo::GetClassData() const { return &_class_data_; }


void NetworkEntityInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetworkEntityInfo*>(&to_msg);
  auto& from = static_cast<const NetworkEntityInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.NetworkEntityInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_entity_id() != 0) {
    _this->_internal_set_entity_id(from._internal_entity_id());
  }
  if (from._internal_cell_pos_x() != 0) {
    _this->_internal_set_cell_pos_x(from._internal_cell_pos_x());
  }
  if (from._internal_cell_pos_y() != 0) {
    _this->_internal_set_cell_pos_y(from._internal_cell_pos_y());
  }
  if (from._internal_max_hp() != 0) {
    _this->_internal_set_max_hp(from._internal_max_hp());
  }
  if (from._internal_hp() != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  if (from._internal_attack() != 0) {
    _this->_internal_set_attack(from._internal_attack());
  }
  if (from._internal_defense() != 0) {
    _this->_internal_set_defense(from._internal_defense());
  }
  if (from._internal_entity_type() != 0) {
    _this->_internal_set_entity_type(from._internal_entity_type());
  }
  if (from._internal_entitye_look_at_dir() != 0) {
    _this->_internal_set_entitye_look_at_dir(from._internal_entitye_look_at_dir());
  }
  if (from._internal_entity_state() != 0) {
    _this->_internal_set_entity_state(from._internal_entity_state());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetworkEntityInfo::CopyFrom(const NetworkEntityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.NetworkEntityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkEntityInfo::IsInitialized() const {
  return true;
}

void NetworkEntityInfo::InternalSwap(NetworkEntityInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetworkEntityInfo, _impl_.entity_state_)
      + sizeof(NetworkEntityInfo::_impl_.entity_state_)
      - PROTOBUF_FIELD_OFFSET(NetworkEntityInfo, _impl_.entity_id_)>(
          reinterpret_cast<char*>(&_impl_.entity_id_),
          reinterpret_cast<char*>(&other->_impl_.entity_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkEntityInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[0]);
}

// ===================================================================

class NetworkMonsterInfo::_Internal {
 public:
  static const ::Protocol::NetworkEntityInfo& monster_info(const NetworkMonsterInfo* msg);
};

const ::Protocol::NetworkEntityInfo&
NetworkMonsterInfo::_Internal::monster_info(const NetworkMonsterInfo* msg) {
  return *msg->_impl_.monster_info_;
}
NetworkMonsterInfo::NetworkMonsterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.NetworkMonsterInfo)
}
NetworkMonsterInfo::NetworkMonsterInfo(const NetworkMonsterInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetworkMonsterInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.monster_info_){nullptr}
    , decltype(_impl_.monster_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_monster_info()) {
    _this->_impl_.monster_info_ = new ::Protocol::NetworkEntityInfo(*from._impl_.monster_info_);
  }
  _this->_impl_.monster_id_ = from._impl_.monster_id_;
  // @@protoc_insertion_point(copy_constructor:Protocol.NetworkMonsterInfo)
}

inline void NetworkMonsterInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.monster_info_){nullptr}
    , decltype(_impl_.monster_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NetworkMonsterInfo::~NetworkMonsterInfo() {
  // @@protoc_insertion_point(destructor:Protocol.NetworkMonsterInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetworkMonsterInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.monster_info_;
}

void NetworkMonsterInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetworkMonsterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.NetworkMonsterInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.monster_info_ != nullptr) {
    delete _impl_.monster_info_;
  }
  _impl_.monster_info_ = nullptr;
  _impl_.monster_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkMonsterInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 monster_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.monster_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.NetworkEntityInfo monster_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_monster_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetworkMonsterInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.NetworkMonsterInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 monster_id = 1;
  if (this->_internal_monster_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_monster_id(), target);
  }

  // .Protocol.NetworkEntityInfo monster_info = 2;
  if (this->_internal_has_monster_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::monster_info(this),
        _Internal::monster_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.NetworkMonsterInfo)
  return target;
}

size_t NetworkMonsterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.NetworkMonsterInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.NetworkEntityInfo monster_info = 2;
  if (this->_internal_has_monster_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.monster_info_);
  }

  // uint32 monster_id = 1;
  if (this->_internal_monster_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_monster_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetworkMonsterInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetworkMonsterInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetworkMonsterInfo::GetClassData() const { return &_class_data_; }


void NetworkMonsterInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetworkMonsterInfo*>(&to_msg);
  auto& from = static_cast<const NetworkMonsterInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.NetworkMonsterInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_monster_info()) {
    _this->_internal_mutable_monster_info()->::Protocol::NetworkEntityInfo::MergeFrom(
        from._internal_monster_info());
  }
  if (from._internal_monster_id() != 0) {
    _this->_internal_set_monster_id(from._internal_monster_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetworkMonsterInfo::CopyFrom(const NetworkMonsterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.NetworkMonsterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkMonsterInfo::IsInitialized() const {
  return true;
}

void NetworkMonsterInfo::InternalSwap(NetworkMonsterInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetworkMonsterInfo, _impl_.monster_id_)
      + sizeof(NetworkMonsterInfo::_impl_.monster_id_)
      - PROTOBUF_FIELD_OFFSET(NetworkMonsterInfo, _impl_.monster_info_)>(
          reinterpret_cast<char*>(&_impl_.monster_info_),
          reinterpret_cast<char*>(&other->_impl_.monster_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkMonsterInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::NetworkEntityInfo*
Arena::CreateMaybeMessage< ::Protocol::NetworkEntityInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::NetworkEntityInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::NetworkMonsterInfo*
Arena::CreateMaybeMessage< ::Protocol::NetworkMonsterInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::NetworkMonsterInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
